<?xml version="1.0"?>
<doc>
    <assembly>
        <name>gxdotnet8</name>
    </assembly>
    <members>
        <member name="T:gx.NamespaceDoc">
            <p><b>GX</b></p>
            <p><b>7.2.12</b></p>
        <summary>
<p><b><i>The GX SDK</i></b></p>
<p>The GX is the base system for the majority of the <b>ARH Inc.</b> products. It is a collection of loadable modules and library functions and gives an ease to program interface to the hardware devices.</p><p>The currently supported programming languages and the usable interfaces are the following: C, C++; Java (jgx.jar); VB.Net, C# (gxdotnet8.dll); VBasic 6, Delphi (gximage.ocx, gxlabel.ocx, gxmotdet.ocx, gxvariant.ocx).</p><p>This documentation gives a detailed description of the ApplicationProgrammingInterface (API) of the GX system. It contains the description of enumerations and classes for the .NET framework.</p><p>Next browse the groups list, check the gxsd.h or check the Change Log in the reference manual for differences against the previous versions. </p>        </summary>
        </member>
        <member name="T:gx.gxDeviceInfo">
            <summary>Class for the device information (Unicode version). </summary>
        </member>
        <member name="F:gx.gxDeviceInfo.type">
        </member>
        <member name="F:gx.gxDeviceInfo.devname">
        </member>
        <member name="F:gx.gxDeviceInfo.serial">
        </member>
        <member name="F:gx.gxDeviceInfo.priority">
        </member>
        <member name="M:gx.gxDeviceInfo.#ctor">
            <summary>Initializes the class. </summary>
        </member>
        <member name="M:gx.gxDeviceInfo.#ctor(gx.gxDeviceInfo)">
            <summary>Copy constructor. </summary>
            <param name="src">The source information structure. </param>
        </member>
        <member name="M:gx.gxDeviceInfo.Dispose">
            <summary>Destructs the class. </summary>
        </member>
        <member name="M:gx.gxDeviceInfo.#ctor">
        </member>
        <member name="M:gx.gxDeviceInfo.SetSerial(System.UInt32)">
            <summary>Sets the serial field. </summary>
            <param name="_serial">Serial of the device. </param>
        </member>
        <member name="M:gx.gxDeviceInfo.SetPriority(System.Int32)">
            <summary>Sets the priority field. </summary>
            <param name="_priority">Priority level of the device. </param>
        </member>
        <member name="M:gx.gxDeviceInfo.GetSerial">
            <summary>Retrieves the serial field. </summary>
            <returns>The serial number of the device. </returns>
        </member>
        <member name="M:gx.gxDeviceInfo.GetPriority">
            <summary>Retrieves the priority field. </summary>
            <returns>The priority level of the device. </returns>
        </member>
        <member name="M:gx.gxDeviceInfo.SetType(System.String)">
            <summary>Updates the type field. </summary>
            <param name="_type">Type of the device. </param>
        </member>
        <member name="M:gx.gxDeviceInfo.SetName(System.String)">
            <summary>Updates the name field. </summary>
            <param name="_devname">Name of the device. </param>
        </member>
        <member name="M:gx.gxDeviceInfo.GetType">
            <summary>Retrieves the type field. </summary>
            <returns>Type of the device. </returns>
        </member>
        <member name="M:gx.gxDeviceInfo.GetName">
            <summary>Retrieves the name field. </summary>
            <returns>Name of the device. </returns>
        </member>
        <member name="M:gx.gxDeviceInfo._Dispose">
        </member>
        <member name="T:gx.gxException">
            <summary>The exception thrown when a GX error occurs. </summary>
        </member>
        <member name="M:gx.gxException.#ctor">
            <summary>Initializes the class. </summary>
            <remarks>Constructor implementation for the <see cref="T:gx.gxException"/> class in the .net.</remarks>
        </member>
        <member name="T:gx.gxGZip">
            <summary>Class for the GZip functions. </summary>
            <remarks>The <see cref="T:gx.gxGZip"/> class does not use properties. </remarks>
        </member>
        <member name="M:gx.gxGZip.#ctor">
            <summary>Class initialization. </summary>
        </member>
        <member name="M:gx.gxGZip.IsValid">
            <summary>Checks if the handler of a module is valid. </summary>
            <returns>In case of existing handler the return value is non-zero. </returns>
        </member>
        <member name="M:gx.gxGZip.Compress(System.Byte[],System.Int32,System.Int32)">
            <summary>Compresses a memory area. </summary>
            <param name="source">Pointer to an uncompressed data. </param>
            <param name="maxlen">Length of the allocated area. If the value is zero, the size of the allocated memory will be length(source)*2+1024. </param>
            <param name="level">Compression level 0-9 (see <see cref="T:gx.GX_ZLEVELS"/>). </param>
            <returns>The compressed data. If an error occurred the function will thrown an exception. </returns>
        </member>
        <member name="M:gx.gxGZip.Uncompress(System.Byte[],System.Int32)">
            <summary>Uncompresses a compressed memory area. </summary>
            <param name="source">Pointer to a compressed data. </param>
            <param name="maxlen">Length of the uncompressed data. </param>
            <returns>The uncompressed data. If an error occurred the function will thrown an exception. </returns>
        </member>
        <member name="M:gx.gxGZip.Create(System.String,System.Int32,System.Int32)">
            <summary>Creates a .gz file (Unicode version). </summary>
            <remarks>Use it when you can compress data to a single file.</remarks>
            <param name="filename">Path and name of the .gz file. </param>
            <param name="level">Compression level (see <see cref="T:gx.GX_ZLEVELS"/>). </param>
            <param name="strategy">Compression strategy (see <see cref="T:gx.GX_ZSTRATEGIES"/>). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.Open(System.String)">
            <summary>Opens a .gz file (Unicode version). </summary>
            <param name="filename">Path and name of the .gz file. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.Close">
            <summary>Closes an opened or created .gz file. </summary>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.Read(System.Int32)">
            <summary>Reads data from an opened .gz file. </summary>
            <param name="len">Length of the allocated area. </param>
            <returns>It returns the uncompressed data. If an error occurred the function will thrown an exception. </returns>
        </member>
        <member name="M:gx.gxGZip.Write(System.Byte[])">
            <summary>Writes data to a created .gz file. </summary>
            <param name="buffer">The unpacked data. The function will write it. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxGZip._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxGZip.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxGZip.GetProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.GetPropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.GetPropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The floating-point value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.SetProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.SetProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">An integer value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.SetProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">A floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxGZip.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="T:gx.gxHandle">
            <summary>The handler class of the GX system. </summary>
            <remarks>It is the base class for most of the other classes and can be used as handle for the GX modules. </remarks>
        </member>
        <member name="M:gx.gxHandle._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxHandle._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxHandle.#ctor">
            <summary>Initializes the class. </summary>
            <remarks>The class will be invalid. Use the Open method for module opening. </remarks>
        </member>
        <member name="M:gx.gxHandle.Dispose">
            <summary>Destructs the class. </summary>
            <remarks>It decreases the reference counter of the handle. The function closes the module if required (in case when the reference counter becames zero). </remarks>
        </member>
        <member name="M:gx.gxHandle.#ctor">
        </member>
        <member name="M:gx.gxHandle.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.Open(System.String)">
            <summary>Opens a GX system compatible module with the default properties (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.Close">
            <summary>Closes a previously opened module. </summary>
            <remarks>It decreases the reference counter of the handle. The function closes the module if required (in case when the reference counter becames zero).</remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.IsValid">
            <summary>Checks if the handle of the module is valid. </summary>
            <returns>In case of existing handle the return value is true. </returns>
        </member>
        <member name="M:gx.gxHandle.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxHandle.GetProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.GetPropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.GetPropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The floating-point value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.SetProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.SetProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">An integer value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.SetProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">A floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxHandle._Dispose">
        </member>
        <member name="T:gx.gxImage">
            <summary>Class for the IMAGE functions. </summary>
        </member>
        <member name="M:gx.gxImage._get_image">
            <summary>Returns the local image pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxImage._set_image(System.IntPtr)">
            <summary>Modifies the local image pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxImage.ref">
            <summary>Returns the reference pointer. </summary>
            <remarks><p><p>gxIMAGE, gx_refimage, gx_unrefimage </p></p></remarks>
            <returns>Reference pointer of the gxIMAGE structure </returns>
        </member>
        <member name="M:gx.gxImage.simage">
            <summary>Returns the size of the image in bytes. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Size of the image in bytes. </returns>
        </member>
        <member name="M:gx.gxImage.format">
            <summary>Returns the pixel format of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Pixel format of the image (see <see cref="T:gx.GX_PIXELFORMATS"/>). </returns>
        </member>
        <member name="M:gx.gxImage.xsize">
            <summary>Returns the horizontal size of the image in pixels. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Horizontal size of the image in pixels. </returns>
        </member>
        <member name="M:gx.gxImage.ysize">
            <summary>Returns the vertical size of the image in pixels. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Vertical size of the image in pixels. </returns>
        </member>
        <member name="M:gx.gxImage.sline">
            <summary>Returns the size of a row in bytes. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Size of a row in bytes. </returns>
        </member>
        <member name="M:gx.gxImage.xres">
            <summary>Returns the horizontal resolution of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Horizontal resolution of the image. </returns>
        </member>
        <member name="M:gx.gxImage.yres">
            <summary>Returns the vertical resolution of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Vertical resolution of the image. </returns>
        </member>
        <member name="M:gx.gxImage.xres(System.Int32)">
            <summary>Sets the horizontal resolution of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <param name="_xres">Horizontal resolution to set. </param>
        </member>
        <member name="M:gx.gxImage.yres(System.Int32)">
            <summary>Sets the vertical resolution of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <param name="_yres">Vertical resolution to set. </param>
        </member>
        <member name="M:gx.gxImage.GetRef">
            <summary>Returns the reference pointer. </summary>
            <remarks><p><p>gxIMAGE, gx_refimage, gx_unrefimage </p></p></remarks>
            <returns>Reference pointer of the gxIMAGE structure </returns>
        </member>
        <member name="M:gx.gxImage.GetPixels">
            <summary>Returns the pointer to the image pixels. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Pointer to the image pixels. </returns>
        </member>
        <member name="M:gx.gxImage.GetSImage">
            <summary>Returns size of the image in bytes. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Size of the image in bytes. </returns>
        </member>
        <member name="M:gx.gxImage.GetPixelFormat">
            <summary>Returns the pixel format of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Pixel format of the image (see <see cref="T:gx.GX_PIXELFORMATS"/>). </returns>
        </member>
        <member name="M:gx.gxImage.GetXSize">
            <summary>Returns the horizontal size of the image in pixels. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Horizontal size of the image in pixels. </returns>
        </member>
        <member name="M:gx.gxImage.GetYSize">
            <summary>Returns the vertical size of the image in pixels. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Vertical size of the image in pixels. </returns>
        </member>
        <member name="M:gx.gxImage.GetSLine">
            <summary>Returns the size of a row in bytes. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Size of a row in bytes. </returns>
        </member>
        <member name="M:gx.gxImage.GetXRes">
            <summary>Returns the horizontal resolution of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Horizontal resolution of the image. </returns>
        </member>
        <member name="M:gx.gxImage.GetYRes">
            <summary>Returns the vertical resolution of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Vertical resolution of the image. </returns>
        </member>
        <member name="M:gx.gxImage.SetXRes(System.Int32)">
            <summary>Sets the horizontal resolution of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <param name="_xres">Horizontal resolution to set. </param>
            <returns>The function always returns true. </returns>
        </member>
        <member name="M:gx.gxImage.SetYRes(System.Int32)">
            <summary>Sets the vertical resolution of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <param name="_yres">Vertical resolution to set. </param>
            <returns>The function always returns true. </returns>
        </member>
        <member name="M:gx.gxImage.#ctor">
            <summary>Class initialization with default properties. </summary>
        </member>
        <member name="M:gx.gxImage.#ctor(System.String)">
            <summary>Class initialization with the place of the properties (Unicode version). </summary>
            <param name="propname">Place of the properties in the property tree (Name of a property group). </param>
        </member>
        <member name="M:gx.gxImage.#ctor(System.String,System.String)">
            <summary>Class initialization with the place of the properties and name of the module (Unicode version). </summary>
            <param name="propname">Place of properties in property tree (Name of a property group). </param>
            <param name="modname">Name of the module. </param>
        </member>
        <member name="M:gx.gxImage.#ctor(gx.gxImageHandler)">
            <summary>Class initialization with previously initialized image handler. </summary>
            <param name="ih">Previously intialized image handler. </param>
        </member>
        <member name="M:gx.gxImage.#ctor(gx.gxImage)">
            <summary>Class initialization with previously initialized image. </summary>
            <param name="src">Previously intialized image. </param>
        </member>
        <member name="M:gx.gxImage.Dispose">
            <summary>Class termination. </summary>
        </member>
        <member name="M:gx.gxImage.#ctor">
        </member>
        <member name="M:gx.gxImage.GetPixelSize">
            <summary>Returns the size of a current format pixel in bytes. </summary>
            <returns>Size of the pixel in bytes. </returns>
        </member>
        <member name="M:gx.gxImage.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Makes an image with proper size and format. </summary>
            <param name="format">Pixel format (see <see cref="T:gx.GX_PIXELFORMATS"/>). </param>
            <param name="xsize">Horizontal size of image in pixels. </param>
            <param name="ysize">Vertical size of image in pixels. </param>
            <param name="sline">Length of a row in bytes (min.: xsize * size of a pixel in bytes). If zero the system computes the correct value. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Convert(gx.gxImageData,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Converts an image to a specific format and size. </summary>
            <param name="src">Reference to the source image data. </param>
            <param name="format">Pixel format of the destination image (see <see cref="T:gx.GX_PIXELFORMATS"/>). </param>
            <param name="xsize">Horizontal size of the destination image in pixels. </param>
            <param name="ysize">Vertical size of the destination image in pixels. </param>
            <param name="sline">Length of a row in bytes (min.: xsize * size of a pixel in bytes). If zero the system computes the correct value. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Convert(gx.gxImage,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Converts an image to a specific format and size. </summary>
            <param name="src">Pointer to the source image. </param>
            <param name="format">Pixel format of the destination image (see <see cref="T:gx.GX_PIXELFORMATS"/>). </param>
            <param name="xsize">Horizontal size of the destination image in pixels. </param>
            <param name="ysize">Vertical size of the destination image in pixels. </param>
            <param name="sline">Length of a row in bytes (min.: xsize * size of a pixel in bytes). If zero the system computes the correct value. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Convert(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Converts an image to a specific format and size. </summary>
            <param name="format">Pixel format of the destination image (see <see cref="T:gx.GX_PIXELFORMATS"/>). </param>
            <param name="xsize">Horizontal size of the destination image in pixels. </param>
            <param name="ysize">Vertical size of the destination image in pixels. </param>
            <param name="sline">Length of a row in bytes (min.: xsize * size of a pixel in bytes). If zero the system computes the correct value. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Convert(System.Int32)">
            <summary>Converts an image to a specific format. </summary>
            <param name="format">Pixel format of the destination image (see <see cref="T:gx.GX_PIXELFORMATS"/>). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Copy(gx.gxImageData)">
            <summary>Copies an image to the class. </summary>
            <param name="src">Reference of the source image. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Copy(gx.gxImage)">
            <summary>Copies an image to the class. </summary>
            <param name="src">Pointer of the source image. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Zoom(gx.gxImageData,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Zooms an image to a specified size. </summary>
            <param name="src">Reference to the source image data. </param>
            <param name="xsize">Horizontal size of the destination area. </param>
            <param name="ysize">Vertical size of the destination area. </param>
            <param name="sline">Size of a row of the destination area. </param>
            <param name="sx1_8">Left coordinate of the zoomed area (shifted left with 8 bit = 256) </param>
            <param name="sy1_8">Top coordinate of the zoomed area (shifted left with 8 bit = 256) </param>
            <param name="sx2_8">Right coordinate of the zoomed area (shifted left with 8 bit = 256) </param>
            <param name="sy2_8">Bottom coordinate of the zoomed area (shifted left with 8 bit = 256) </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Zoom(gx.gxImageData,System.Int32,System.Int32,System.Int32)">
            <summary>Zooms an image to a specified size. </summary>
            <param name="src">Reference to the source image data. </param>
            <param name="xsize">Horizontal size of the destination area. </param>
            <param name="ysize">Vertical size of the destination area. </param>
            <param name="sline">Size of a row of the destination area. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Zoom(gx.gxImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Zooms an image to a specified size. </summary>
            <param name="src">Reference to the source image. </param>
            <param name="xsize">Horizontal size of the destination area. </param>
            <param name="ysize">Vertical size of the destination area. </param>
            <param name="sline">Size of a row of the destination area. </param>
            <param name="sx1_8">Left coordinate of the zoomed area (shifted left with 8 bit = 256) </param>
            <param name="sy1_8">Top coordinate of the zoomed area (shifted left with 8 bit = 256) </param>
            <param name="sx2_8">Right coordinate of the zoomed area (shifted left with 8 bit = 256) </param>
            <param name="sy2_8">Bottom coordinate of the zoomed area (shifted left with 8 bit = 256) </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Zoom(gx.gxImage,System.Int32,System.Int32,System.Int32)">
            <summary>Zooms an image to a specified size. </summary>
            <param name="src">Reference to the source image. </param>
            <param name="xsize">Horizontal size of the destination area. </param>
            <param name="ysize">Vertical size of the destination area. </param>
            <param name="sline">Size of a row of the destination area. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Rotate(gx.gxImageData,System.Int32)">
            <summary>Rotates an image to a specified degree. </summary>
            <param name="src">Reference to the source image data. </param>
            <param name="degree">Degree (Must be 0, 90, 180, 270). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Rotate(gx.gxImage,System.Int32)">
            <summary>Rotates an image to a specified degree. </summary>
            <param name="src">Reference to the source image. </param>
            <param name="degree">Degree (Must be 0, 90, 180, 270). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Mirror(gx.gxImageData,System.Int32)">
            <summary>Mirrors an image to a specified mode. </summary>
            <param name="src">Reference to an image data. </param>
            <param name="flags">Mirror flags. It can be <see cref="F:gx.GX_MIRRORFLAGS.GX_MIRROR_HORIZONTAL"/> or/and <see cref="F:gx.GX_MIRRORFLAGS.GX_MIRROR_VERTICAL"/>. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Mirror(gx.gxImage,System.Int32)">
            <summary>Mirrors an image to a specified mode. </summary>
            <param name="src">Reference to an image. </param>
            <param name="flags">Mirror flags. It can be <see cref="F:gx.GX_MIRRORFLAGS.GX_MIRROR_HORIZONTAL"/> or/and <see cref="F:gx.GX_MIRRORFLAGS.GX_MIRROR_VERTICAL"/>. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Mirror(System.Int32)">
            <summary>Mirrors an image to a specified mode. </summary>
            <param name="flags">Mirror flags. It can be <see cref="F:gx.GX_MIRRORFLAGS.GX_MIRROR_HORIZONTAL"/> or/and <see cref="F:gx.GX_MIRRORFLAGS.GX_MIRROR_VERTICAL"/>. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Load(System.String,System.Int32,gx.gxVariant,gx.gxVariant)">
            <summary>Loads an image with comments from a mass storage device and converts it to a specific pixel format (Unicode version). </summary>
            <remarks>On loading a RAW image, the image must be created with correct parameters (sline parameter also included). The format parameter of the <see cref="M:gx.gxImage.Load(System.String,System.Int32,gx.gxVariant,gx.gxVariant)"/> must be -1 for RAW images.</remarks>
            <param name="filename">Name of the image file. </param>
            <param name="pixelformat">The specific pixel format. Giving <see cref="F:gx.GX_PIXELFORMATS.GX_GRAY"/> converts a color image to grayscale (see <see cref="T:gx.GX_PIXELFORMATS"/>). </param>
            <param name="properties">Properties for the image loader. </param>
            <param name="comments">Comments of the image. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Load(System.String,System.Int32)">
            <summary>Loads an image from a mass storage device and converts it to a specific pixel format (Unicode version). </summary>
            <remarks>On loading a RAW image, the image must be created with correct parameters (sline parameter also included). The format parameter of the <see cref="M:gx.gxImage.Load(System.String,System.Int32,gx.gxVariant,gx.gxVariant)"/> must be -1 for RAW images.</remarks>
            <param name="filename">Name of the image file. </param>
            <param name="pixelformat">The specific pixel format. Giving <see cref="F:gx.GX_PIXELFORMATS.GX_GRAY"/> converts a color image to grayscale (see <see cref="T:gx.GX_PIXELFORMATS"/>). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Load(System.String)">
            <summary>Loads an image from a mass storage device (Unicode version). </summary>
            <param name="filename">Name of the image file. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Save(System.String,System.Int32,gx.gxVariant,gx.gxVariant)">
            <summary>Saves an image to a mass storage device in the specific file format (Unicode version). </summary>
            <param name="filename">Name of the image file. </param>
            <param name="fileformat">Format of the image file (see <see cref="T:gx.GX_IMGFILEFORMATS"/>). </param>
            <param name="properties">Properties for the image writer. It can be empty. </param>
            <param name="comments">Comments of the image. It can be empty. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Save(System.String,System.Int32)">
            <summary>Saves an image to a mass storage device in the specific file format (Unicode version). </summary>
            <param name="filename">Name of the image file. </param>
            <param name="fileformat">Format of the image file (see <see cref="T:gx.GX_IMGFILEFORMATS"/>). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.LoadFromMem(System.Byte[],System.Int32,gx.gxVariant,gx.gxVariant)">
            <summary>Loads an image with comments from the memory and converts it to a specific pixel format. </summary>
            <remarks>On loading a RAW image, the image must be created with correct parameters (sline parameter also included). The format parameter of the <see cref="M:gx.gxImage.LoadFromMem(System.Byte[],System.Int32,gx.gxVariant,gx.gxVariant)"/> must be -1 for RAW images.</remarks>
            <param name="buffer">The image data. </param>
            <param name="pixelformat">The specific pixel format. Giving GX_GRAY converts a color image to grayscale (see <see cref="T:gx.GX_PIXELFORMATS"/>). </param>
            <param name="properties">Properties for the image loader. </param>
            <param name="comments">Comments of the image. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.SaveToMem(System.Int32,gx.gxVariant,gx.gxVariant)">
            <summary>Saves an image with comments in a specific file format to a specific memory area. </summary>
            <param name="fileformat">Format of the image file (see <see cref="T:gx.GX_IMGFILEFORMATS"/>). </param>
            <param name="properties">Properties for the image writer. It can be empty. </param>
            <param name="comments">Comments of the image. It can be empty. </param>
            <returns>Image data. An exception is thrown or null is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.LoadFromMem(System.Byte[],System.Int32)">
            <summary>Loads an image from the memory and converts it to a specific pixel format. </summary>
            <remarks>On loading a RAW image, the image must be created with correct parameters (sline parameter also included). The format parameter of the <see cref="M:gx.gxImage.LoadFromMem(System.Byte[],System.Int32,gx.gxVariant,gx.gxVariant)"/> must be -1 for RAW images.</remarks>
            <param name="buffer">The image data. </param>
            <param name="pixelformat">The specific pixel format. Giving GX_GRAY converts a color image to grayscale (see <see cref="T:gx.GX_PIXELFORMATS"/>). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.SaveToMem(System.Int32)">
            <summary>Saves an image in a specific file format to a specific memory area. </summary>
            <param name="fileformat">Format of the image file (see <see cref="T:gx.GX_IMGFILEFORMATS"/>). </param>
            <returns>Image data. An exception is thrown or null is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.IsValid">
            <summary>Checks if the image structure and the handle are valid. </summary>
            <returns>In case of valid image the return value is non-zero. </returns>
        </member>
        <member name="M:gx.gxImage.DisplayImage(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Displays an image. </summary>
            <param name="hdc">Handle of device context. </param>
            <param name="x">X1 coordinate of display. </param>
            <param name="y">Y1 coordinate of display. </param>
            <param name="xsize">Displayed horizontal size of image. </param>
            <param name="ysize">Displayed vertical size of image. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Copy">
            <summary>Copies the image to the clipboard. </summary>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Paste">
            <summary>Inserts an image from the clipboard. </summary>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.FromVariant(gx.gxVariant)">
            <summary>Loads an embedded image from a variant. </summary>
            <param name="variant">Variant with an embedded image. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.ToVariant(System.Int32)">
            <summary>Embedds an image into a variant. </summary>
            <param name="varid">The id for the created variant. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.TestImageFileFormat(System.Byte[])">
            <summary>Tests if a memory area contains an image file. </summary>
            <param name="buffer">The file data. </param>
            <returns>An exception is thrown or 0 is returned in case of error, -1 is returned for unknown file type. </returns>
        </member>
        <member name="M:gx.gxImage.TestImageFileFormat(System.String)">
            <summary>Tests if a file is an image file. </summary>
            <param name="filename">Name of the file to test.</param>
            <returns>An exception is thrown or 0 is returned in case of error, -1 is returned for unknown file type. </returns>
        </member>
        <member name="M:gx.gxImage._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxImage._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxImage.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Open(System.String)">
            <summary>Opens a GX system compatible module with the default properties (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Close">
            <summary>Closes a previously opened module. </summary>
            <remarks>It decreases the reference counter of the handle. The function closes the module if required (in case when the reference counter becames zero).</remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxImage.GetProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.GetPropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.GetPropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The floating-point value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.SetProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.SetProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">An integer value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.SetProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">A floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImage._set_image(gxIMAGE *)">
            <summary>Modifies the local image pointer. </summary>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxImage._Dispose">
        </member>
        <member name="T:gx.gxImageData">
            <summary>Class for the IMAGE data and some low-level functions. </summary>
            <remarks><p><p><see cref="T:gx.gxImage"/></p></p></remarks>
        </member>
        <member name="M:gx.gxImageData._get_image">
            <summary>Returns the local image data pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxImageData._set_image(System.IntPtr)">
            <summary>Modifies the local image data pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxImageData.#ctor">
            <summary>Class initialization. </summary>
        </member>
        <member name="M:gx.gxImageData.Dispose">
            <summary>Class termination. </summary>
        </member>
        <member name="M:gx.gxImageData.#ctor">
        </member>
        <member name="M:gx.gxImageData.ref">
            <summary>It returns the reference pointer. </summary>
            <remarks><p><p>gxIMAGE, gx_refimage, gx_unrefimage </p></p></remarks>
            <returns>Reference pointer of the gxIMAGE structure </returns>
        </member>
        <member name="M:gx.gxImageData.simage">
            <summary>It returns the size of the image in bytes. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Size of the image in bytes. </returns>
        </member>
        <member name="M:gx.gxImageData.format">
            <summary>It returns the pixel format of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Pixel format of the image (see <see cref="T:gx.GX_PIXELFORMATS"/>). </returns>
        </member>
        <member name="M:gx.gxImageData.xsize">
            <summary>It returns the horizontal size of the image in pixels. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Horizontal size of the image in pixels. </returns>
        </member>
        <member name="M:gx.gxImageData.ysize">
            <summary>It returns the vertical size of the image in pixels. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Vertical size of the image in pixels. </returns>
        </member>
        <member name="M:gx.gxImageData.sline">
            <summary>It returns the size of a row in bytes. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Size of a row in bytes. </returns>
        </member>
        <member name="M:gx.gxImageData.xres">
            <summary>It returns the horizontal resolution of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Horizontal resolution of the image. </returns>
        </member>
        <member name="M:gx.gxImageData.yres">
            <summary>It returns the vertical resolution of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Vertical resolution of the image. </returns>
        </member>
        <member name="M:gx.gxImageData.xres(System.Int32)">
            <summary>The function sets the horizontal resolution of the image. </summary>
            <remarks><p><p>gxIMAGE</p></p></remarks>
            <param name="_xres">Value to set. </param>
        </member>
        <member name="M:gx.gxImageData.yres(System.Int32)">
            <summary>The function sets the vertical resolution of the image. </summary>
            <remarks><p><p>gxIMAGE</p></p></remarks>
            <param name="_yres">Value to set. </param>
        </member>
        <member name="M:gx.gxImageData.GetRef">
            <summary>It returns the reference pointer. </summary>
            <remarks><p><p>gxIMAGE, gx_refimage, gx_unrefimage </p></p></remarks>
            <returns>Reference pointer of the gxIMAGE structure </returns>
        </member>
        <member name="M:gx.gxImageData.GetPixels">
            <summary>It returns the pointer to the image pixels. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Pointer to the image pixels. </returns>
        </member>
        <member name="M:gx.gxImageData.GetSImage">
            <summary>It returns size of the image in bytes. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Size of the image in bytes. </returns>
        </member>
        <member name="M:gx.gxImageData.GetPixelFormat">
            <summary>It returns the pixel format of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Pixel format of the image (see <see cref="T:gx.GX_PIXELFORMATS"/>). </returns>
        </member>
        <member name="M:gx.gxImageData.GetXSize">
            <summary>It returns the horizontal size of the image in pixels. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Horizontal size of the image in pixels. </returns>
        </member>
        <member name="M:gx.gxImageData.GetYSize">
            <summary>It returns the vertical size of the image in pixels. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Vertical size of the image in pixels. </returns>
        </member>
        <member name="M:gx.gxImageData.GetSLine">
            <summary>It returns the size of a row in bytes. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Size of a row in bytes. </returns>
        </member>
        <member name="M:gx.gxImageData.GetXRes">
            <summary>It returns the horizontal resolution of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Horizontal resolution of the image. </returns>
        </member>
        <member name="M:gx.gxImageData.GetYRes">
            <summary>It returns the vertical resolution of the image. </summary>
            <remarks><p><p>gxIMAGE </p></p></remarks>
            <returns>Vertical resolution of the image. </returns>
        </member>
        <member name="M:gx.gxImageData.SetXRes(System.Int32)">
            <summary>The function sets the horizontal resolution of the image. </summary>
            <remarks><p><p>gxIMAGE</p></p></remarks>
            <param name="_xres">Value to set. </param>
            <returns>The function always returns true. </returns>
        </member>
        <member name="M:gx.gxImageData.SetYRes(System.Int32)">
            <summary>The function sets the vertical resolution of the image. </summary>
            <remarks><p><p>gxIMAGE</p></p></remarks>
            <param name="_yres">Value to set. </param>
            <returns>The function always returns true. </returns>
        </member>
        <member name="M:gx.gxImageData._Dispose">
        </member>
        <member name="T:gx.gxImageHandler">
            <summary>Class for the IMAGE functions. </summary>
        </member>
        <member name="M:gx.gxImageHandler.#ctor">
            <summary>Class initialization with default properties. </summary>
        </member>
        <member name="M:gx.gxImageHandler.#ctor(System.String,System.String)">
            <summary>Class initialization with place of the properties and name of the module. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="propname">Place of the properties in the property tree (Name of a property group). </param>
            <param name="modname">Name of the module. </param>
        </member>
        <member name="M:gx.gxImageHandler.#ctor(System.String)">
            <summary>Class initialization with place of the properties. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="propname">Place of the properties in the property tree (Name of a property group). </param>
        </member>
        <member name="M:gx.gxImageHandler.#ctor(gx.gxImageHandler)">
            <summary>Class initalization with another image handle. </summary>
            <param name="src">Source image handle. The reference of this image handle will be increased. </param>
        </member>
        <member name="M:gx.gxImageHandler._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxImageHandler._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxImageHandler.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.Open(System.String)">
            <summary>Opens a GX system compatible module with the default properties (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.Close">
            <summary>Closes a previously opened module. </summary>
            <remarks>It decreases the reference counter of the handle. The function closes the module if required (in case when the reference counter becames zero).</remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.IsValid">
            <summary>Checks if the handle of the module is valid. </summary>
            <returns>In case of existing handle the return value is true. </returns>
        </member>
        <member name="M:gx.gxImageHandler.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxImageHandler.GetProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.GetPropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.GetPropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The floating-point value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.SetProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.SetProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">An integer value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.SetProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">A floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImageHandler.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="T:gx.gxImgExt">
            <summary>Class for the extended image functions. </summary>
        </member>
        <member name="M:gx.gxImgExt.#ctor">
            <summary>Constructor. </summary>
        </member>
        <member name="M:gx.gxImgExt.ColorAdjust(gx.gxImage,System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>Makes contrast, brightness, saturation and gamma correction on the image. </summary>
            <remarks><p>The usual values for the adjusting values are between [-1, 1], the level change calculation can be expressed by the <code>new_level = (1+f)*old_level </code> abstraction.</p><p>The value of -1 discards all the partial information, a value of 0 does not modify the image setting.</p><p>For the gamma correction other rules are applied. The value of 1 leaves the image unchanged.</p></remarks>
            <param name="image">Image to process. </param>
            <param name="contrast">Contrast adjust level. </param>
            <param name="brightness">Brightness adjust level. </param>
            <param name="saturation">Saturation adjust level. </param>
            <param name="gamma">Gamma correction level. </param>
            <param name="flags">Color adjusting flags, see <see cref="T:gx.GX_COLORADJUST_FLAGS"/>. </param>
            <returns>On error false is returned and the error code/string in the GX system is set appropriately ( see <see cref="M:gx.gxSystem.GetErrorString"/> ). </returns>
        </member>
        <member name="M:gx.gxImgExt.Contrast(gx.gxImage,System.Single,System.Int32)">
            <summary>Makes contrast correction on the image. </summary>
            <remarks><p>The usual values for the adjusting values are between [-1, 1], the level change calculation can be expressed by the <code>new_level = (1+f)*old_level </code> abstraction.</p><p>The value of -1 discards all the partial information, a value of 0 does not modify the image setting.</p><p>In case of adjusting more than one image color parameter the <see cref="M:gx.gxImgExt.ColorAdjust(gx.gxImage,System.Single,System.Single,System.Single,System.Single,System.Int32)"/> function should be called for performance reasons.</p></remarks>
            <param name="image">Image to process. </param>
            <param name="contrast">Contrast adjust level. </param>
            <param name="flags">Color adjusting flags, see <see cref="T:gx.GX_COLORADJUST_FLAGS"/>. </param>
            <returns>On error false is returned and the error code/string in the GX system is set appropriately ( see <see cref="M:gx.gxSystem.GetErrorString"/> ). </returns>
        </member>
        <member name="M:gx.gxImgExt.Brightness(gx.gxImage,System.Single,System.Int32)">
            <summary>Makes brightness correction on the image. </summary>
            <remarks><p>The usual values for the adjusting values are between [-1, 1].</p><p>The value of -1 results a black image, a value of 0 does not modify the image setting, and the value of 1 results a white image.</p><p>In case of adjusting more than one image color parameter the <see cref="M:gx.gxImgExt.ColorAdjust(gx.gxImage,System.Single,System.Single,System.Single,System.Single,System.Int32)"/> function should be called for performance reasons.</p></remarks>
            <param name="image">Image to process. </param>
            <param name="brightness">Brightness adjust level. </param>
            <param name="flags">Color adjusting flags, see <see cref="T:gx.GX_COLORADJUST_FLAGS"/>. </param>
            <returns>On error false is returned and the error code/string in the GX system is set appropriately ( see <see cref="M:gx.gxSystem.GetErrorString"/> ). </returns>
        </member>
        <member name="M:gx.gxImgExt.Saturation(gx.gxImage,System.Single)">
            <summary>Makes saturation correction on the image. </summary>
            <remarks><p>The usual values for the adjusting values are between [-1, 1], the level change calculation can be expressed by the <code>new_level = (1+f)*old_level </code> abstraction.</p><p>The value of -1 discards all the partial information, a value of 0 does not modify the image setting.</p><p>In case of adjusting more than one image color parameter the <see cref="M:gx.gxImgExt.ColorAdjust(gx.gxImage,System.Single,System.Single,System.Single,System.Single,System.Int32)"/> function should be called for performance reasons.</p></remarks>
            <param name="image">Image to process. </param>
            <param name="saturation">Saturation adjust level. </param>
            <returns>On error false is returned and the error code/string in the GX system is set appropriately ( see <see cref="M:gx.gxSystem.GetErrorString"/> ). </returns>
        </member>
        <member name="M:gx.gxImgExt.Gamma(gx.gxImage,System.Single)">
            <summary>Makes gamma correction on the image. </summary>
            <remarks>In case of adjusting more than one image color parameter the <see cref="M:gx.gxImgExt.ColorAdjust(gx.gxImage,System.Single,System.Single,System.Single,System.Single,System.Int32)"/> function should be called for performance reasons.</remarks>
            <param name="image">Image to process. </param>
            <param name="gamma">Gamma correction level. </param>
            <returns>On error false is returned and the error code/string in the GX system is set appropriately ( see <see cref="M:gx.gxSystem.GetErrorString"/> ). </returns>
        </member>
        <member name="M:gx.gxImgExt.ColorMixer(gx.gxImage,gx.gxImage,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Changes the colors of the source image based on the weight parameters. </summary>
            <remarks><p>This function is an advanced image manipulating function that can be used in adaptive processes by setting the weights.</p><p><p>If only the first three weights are defined the resulted image will be a grayscale image.</p></p></remarks>
            <param name="target">Preallocated image to return the result. </param>
            <param name="source">Image to process. </param>
            <param name="r1">Adaptable weight. </param>
            <param name="g1">Adaptable weight. </param>
            <param name="b1">Adaptable weight. </param>
            <param name="r2">Adaptable weight. </param>
            <param name="g2">Adaptable weight. </param>
            <param name="b2">Adaptable weight. </param>
            <param name="r3">Adaptable weight. </param>
            <param name="g3">Adaptable weight. </param>
            <param name="b3">Adaptable weight. </param>
            <returns>On error false is returned and the error code/string in the GX system is set appropriately ( see <see cref="M:gx.gxSystem.GetErrorString"/> ). </returns>
        </member>
        <member name="M:gx.gxImgExt.Difference(gx.gxImage,gx.gxImage,gx.gxImage)">
            <summary>Generates a differential image from two images. </summary>
            <param name="target">Preallocated image to return the result. </param>
            <param name="source1">First image. </param>
            <param name="source2">Second image. </param>
            <returns>On error false is returned and the error code/string in the GX system is set appropriately ( see <see cref="M:gx.gxSystem.GetErrorString"/> ). </returns>
        </member>
        <member name="M:gx.gxImgExt._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxImgExt._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxImgExt.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.Open(System.String)">
            <summary>Opens a GX system compatible module with the default properties (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.Close">
            <summary>Closes a previously opened module. </summary>
            <remarks>It decreases the reference counter of the handle. The function closes the module if required (in case when the reference counter becames zero).</remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.IsValid">
            <summary>Checks if the handle of the module is valid. </summary>
            <returns>In case of existing handle the return value is true. </returns>
        </member>
        <member name="M:gx.gxImgExt.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxImgExt.GetProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.GetPropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.GetPropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The floating-point value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.SetProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.SetProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">An integer value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.SetProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">A floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxImgExt.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="T:gx.gxLog">
            <summary>Class for the GX LOG functions. </summary>
        </member>
        <member name="M:gx.gxLog.#ctor">
            <summary>Class initialization. </summary>
        </member>
        <member name="M:gx.gxLog.#ctor(System.String,System.String)">
            <summary>Class initialization with place of the properties and name of the module. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="propname">Place of the properties in the property tree. (Name of the property group) </param>
            <param name="modname">Name of the module. </param>
        </member>
        <member name="M:gx.gxLog.#ctor(System.String)">
            <summary>Class initialization with place of the properties and name of the module. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="propname">Place of the properties in the property tree. (Name of the property group) </param>
        </member>
        <member name="M:gx.gxLog.Dispose">
            <summary>Class termination. </summary>
        </member>
        <member name="M:gx.gxLog.#ctor">
        </member>
        <member name="M:gx.gxLog.WriteLog(System.Int32,System.String,System.Int32,System.String,System.String)">
            <summary>Writes a log with debug information. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="level">Level of the log item. (see <see cref="T:gx.GX_LOGLEVELS"/>) </param>
            <param name="file">Name of the source file the function is called from (in debug mode). </param>
            <param name="line">Line number of the source file the function is called from (in debug mode). </param>
            <param name="function">Name of the function the log function is called from (in debug mode). </param>
            <param name="str">Descriptive text of the log. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.WriteLog(System.Int32,System.String)">
            <summary>Writes a log with debug information. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="level">Level of the log item. (see <see cref="T:gx.GX_LOGLEVELS"/>) </param>
            <param name="str">Descriptive text of the log. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.WriteEmergency(System.String)">
            <summary>Writes a log with emergency level. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="str">Descriptive text of the log. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.WriteFatal(System.String)">
            <summary>Writes a log with fatal level. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="str">Descriptive text of the log. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.WriteError(System.String)">
            <summary>Writes a log with error level. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="str">Descriptive text of the log. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.WriteWarning(System.String)">
            <summary>Writes a log with warning level. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="str">Descriptive text of the log. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.WriteInfo(System.String)">
            <summary>Writes a log with information level. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="str">Descriptive text of the log. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.WriteInfo2(System.String)">
            <summary>Writes a log with information level 2. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="str">Descriptive text of the log. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.WriteInfo3(System.String)">
            <summary>Writes a log with information level 3. </summary>
            <remarks>(Unicode version) </remarks>
            <param name="str">Descriptive text of the log. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxLog._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxLog.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.Open(System.String)">
            <summary>Opens a GX system compatible module with the default properties (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.Close">
            <summary>Closes a previously opened module. </summary>
            <remarks>It decreases the reference counter of the handle. The function closes the module if required (in case when the reference counter becames zero).</remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.IsValid">
            <summary>Checks if the handle of the module is valid. </summary>
            <returns>In case of existing handle the return value is true. </returns>
        </member>
        <member name="M:gx.gxLog.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxLog.GetProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.GetPropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.GetPropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The floating-point value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.SetProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.SetProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">An integer value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.SetProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">A floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxLog._Dispose">
            <summary>It disposes the class. </summary>
        </member>
        <member name="T:gx.gxMotionDetector">
            <summary>Class implementation of the motion detection module functions. </summary>
        </member>
        <member name="M:gx.gxMotionDetector.#ctor">
            <summary>Class initialization. </summary>
        </member>
        <member name="M:gx.gxMotionDetector.#ctor(System.String,System.String)">
            <summary>Class initialization with place of properties and name of the module (Unicode version). </summary>
            <param name="propname">Place of properties in the property tree (name of the property group). </param>
            <param name="modname">Name of the module. </param>
        </member>
        <member name="M:gx.gxMotionDetector.#ctor(System.String)">
            <summary>Class initialization with place of properties (Unicode version). </summary>
            <param name="propname">Place of properties in the property tree (name of the property group). </param>
        </member>
        <member name="M:gx.gxMotionDetector.Iteration(gx.gxImageData)">
            <summary>Adding a new image to the stream. </summary>
            <remarks><p><p>The size of the image must be the same as given by the properties. GX_GRAY (8 bit grayscale), GX_RGB (24 bit RGB) and GX_BGR (24 bit BGR) pixel formats are allowed! In case of half frames use only the same field in one stream. For detecting motion on both odd and even fields, the using of two separated streams (opening twice the module) is recomended.</p></p></remarks>
            <param name="image">Pointer to an image which represents the next still of the stream. </param>
            <returns>The function returns the maximum of the blocks' pixel difference. If the image is the first still in the stream, -1 is returned. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.Iteration(gx.gxImage)">
            <summary>Adding a new image to the stream. </summary>
            <remarks><p><p>The size of the image must be the same as given by the properties. GX_GRAY (8 bit grayscale), GX_RGB (24 bit RGB) and GX_BGR (24 bit BGR) pixel formats are allowed! In case of half frames use only the same field in one stream. For detecting motion on both odd and even fields, the using of two separated streams (opening twice the module) is recomended.</p></p></remarks>
            <param name="image">Pointer to an image which represents the next still of the stream. </param>
            <returns>The function returns the maximum of the blocks' pixel difference. If the image is the first still in the stream, -1 is returned. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.Iteration(gx.gxImageData,gx.gxMotionDetectorResult)">
            <summary>Adding a new image to the stream. </summary>
            <remarks><p><p>The size of the image must be the same as given by the properties. GX_GRAY (8 bit grayscale), GX_RGB (24 bit RGB) and GX_BGR (24 bit BGR) pixel formats are allowed! In case of half frames use only the same field in one stream. For detecting motion on both odd and even fields, the using of two separated streams (opening twice the module) is recomended.</p></p></remarks>
            <param name="image">Pointer to an image which represents the next still of the stream. </param>
            <param name="result">The result structure which the function will updates it. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.Iteration(gx.gxImage,gx.gxMotionDetectorResult)">
            <summary>Adding a new image to the stream. </summary>
            <remarks><p><p>The size of the image must be the same as given by the properties. GX_GRAY (8 bit grayscale), GX_RGB (24 bit RGB) and GX_BGR (24 bit BGR) pixel formats are allowed! In case of half frames use only the same field in one stream. For detecting motion on both odd and even fields, the using of two separated streams (opening twice the module) is recomended.</p></p></remarks>
            <param name="image">Pointer to an image which represents the next still of the stream. </param>
            <param name="result">The result structure which the function will updates it. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxMotionDetector._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxMotionDetector.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.Open(System.String)">
            <summary>Opens a GX system compatible module with the default properties (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.Close">
            <summary>Closes a previously opened module. </summary>
            <remarks>It decreases the reference counter of the handle. The function closes the module if required (in case when the reference counter becames zero).</remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.IsValid">
            <summary>Checks if the handle of the module is valid. </summary>
            <returns>In case of existing handle the return value is true. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.GetProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.GetPropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.GetPropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The floating-point value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.SetProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.SetProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">An integer value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.SetProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">A floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxMotionDetector.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="T:gx.gxMotionDetectorResult">
            <summary>Class for the motion detection functions. </summary>
        </member>
        <member name="F:gx.gxMotionDetectorResult.min_difference">
            <summary>The minimum of the blocks' pixel difference inside of the area. </summary>
        </member>
        <member name="F:gx.gxMotionDetectorResult.max_difference">
            <summary>The maximum of the blocks' pixel difference inside of the area. </summary>
        </member>
        <member name="F:gx.gxMotionDetectorResult.found_x1">
            <summary>The left upper horizontal coordinate of the founded area. </summary>
        </member>
        <member name="F:gx.gxMotionDetectorResult.found_y1">
            <summary>The left upper vertical coordinate of the founded area. </summary>
        </member>
        <member name="F:gx.gxMotionDetectorResult.found_x2">
            <summary>The right lower horizontal coordinate of the founded area. </summary>
        </member>
        <member name="F:gx.gxMotionDetectorResult.found_y2">
            <summary>The right lower vertical coordinate of the founded area. </summary>
        </member>
        <member name="M:gx.gxMotionDetectorResult.#ctor">
            <summary>Constructor. </summary>
        </member>
        <member name="M:gx.gxMotionDetectorResult.GetMinDifference">
            <summary>Returns the value of the <i>min_difference</i> variable. </summary>
        </member>
        <member name="M:gx.gxMotionDetectorResult.GetMaxDifference">
            <summary>Returns the value of the <i>max_difference</i> variable. </summary>
        </member>
        <member name="M:gx.gxMotionDetectorResult.GetFoundX1">
            <summary>Returns the value of the <i>found_x1</i> variable. </summary>
        </member>
        <member name="M:gx.gxMotionDetectorResult.GetFoundY1">
            <summary>Returns the value of the <i>found_y1</i> variable. </summary>
        </member>
        <member name="M:gx.gxMotionDetectorResult.GetFoundX2">
            <summary>Returns the value of the <i>found_x2</i> variable. </summary>
        </member>
        <member name="M:gx.gxMotionDetectorResult.GetFoundY2">
            <summary>Returns the value of the <i>found_y2</i> variable. </summary>
        </member>
        <member name="T:gx.gxProperty">
            <summary>Base class for the GX property functions. </summary>
        </member>
        <member name="M:gx.gxProperty.#ctor">
            <summary>Class initialization. </summary>
        </member>
        <member name="M:gx.gxProperty.#ctor(System.String)">
            <summary>Class initialization with the name of the module (Unicode version). </summary>
            <param name="modname">Name of the module. </param>
        </member>
        <member name="M:gx.gxProperty.Load(System.String)">
            <summary>Loads properties from a specified file (Unicode version). </summary>
            <param name="name">Name of the property file. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.Save(System.String,System.Boolean)">
            <summary>Saves properties into a specified file (Unicode version). </summary>
            <param name="name">Name of the property file. </param>
            <param name="unicode">If it is true, the file will be unicode. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.Save(System.String)">
            <summary>Saves properties into a specified file in ASCII format. </summary>
            <param name="name">Name of the property file. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.Flush">
            <summary>Forces a write of all buffered data. </summary>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.GetProperty(System.String)">
            <summary>Gets the value of the specified property (Unicode version). </summary>
            <remarks><p><p>If there is no such property in the property tree, it tries to return the value from the inherited path or the <i>/default</i> path of the tree.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>The value of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.GetPropertyInt(System.String)">
            <summary>Gets the integer value of the specified property (Unicode version). </summary>
            <remarks><p><p>If there is no such property in the property tree, it tries to return the value from the inherited path or the <i>/default</i> path of the tree.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>The integer value of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.GetPropertyFloat(System.String)">
            <summary>Gets the floating-point value of the specified property (Unicode version). </summary>
            <remarks><p><p>If there is no such property in the property tree, it tries to return the value from the inherited path or the <i>/default</i> path of the tree.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>The floating-point value of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.SetProperty(System.String,System.String)">
            <summary>Creates a property with the specified name in the property tree and assigns the specified value to it (Unicode version). </summary>
            <remarks><p><p>If the property exists it changes the value.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.SetProperty(System.String)">
            <summary>Creates a property with the specified name in the property tree with no value (Unicode version). </summary>
            <remarks><p><p>If the property exists it removes the value.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.ClearProperty(System.String)">
            <summary>Removes the value of the property in the property tree (Unicode version). </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.SetProperty(System.String,System.Int32)">
            <summary>Creates a property with the specified name in the property tree and assigns the specified value to it (Unicode version). </summary>
            <remarks><p><p>If the property exists it changes the value. The integer value is converted to string and then written to the tree.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <param name="ivalue">Integer value of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.SetProperty(System.String,System.Double)">
            <summary>Creates a property with the specified name in the property tree and assigns the specified value to it (Unicode version). </summary>
            <remarks><p><p>If the property exists it changes the value. The floating-point value is converted to string and then written to the tree.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <param name="fvalue">Floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.GetPropertyType(System.String)">
            <summary>Gets the type of a specified property (Unicode version). </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>Type of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.RmProperties(System.String)">
            <summary>Removes a property and its subproperties from the specified place in the property tree (Unicode version). </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.GetProperties(System.String)">
            <summary>Gets the subproperties of a specified property from the property tree. </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>The array of names. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.GetAllProperties(System.String)">
            <summary>Gets the subproperties and parents of a specified property from the property tree and from the <i>/default</i> subtree. </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>The array of names. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.SetPropertyParent(System.String,System.String)">
            <summary>Changes the parent of a specified property (Unicode version). </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <param name="str">Parent of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.GetPropertyParent(System.String)">
            <summary>Gets the parent of a specified property (Unicode version). </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>Parent of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.ClearPropertyParent(System.String)">
            <summary>Removes the parent link of a specified property (Unicode version). </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.GetModuleProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.GetModulePropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Integer value of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.GetModulePropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Floating-point value of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.SetModuleProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.SetModuleProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">Integer value of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty.SetModuleProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">Floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxProperty._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxProperty._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxProperty.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxProperty.Open(System.String)">
            <summary>Opens a GX system compatible module with the default properties (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxProperty.Close">
            <summary>Closes a previously opened module. </summary>
            <remarks>It decreases the reference counter of the handle. The function closes the module if required (in case when the reference counter becames zero).</remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxProperty.IsValid">
            <summary>Checks if the handle of the module is valid. </summary>
            <returns>In case of existing handle the return value is true. </returns>
        </member>
        <member name="M:gx.gxProperty.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxProperty.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxProperty.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxProperty.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxProperty.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxProperty.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="T:gx.gxPropertyFile">
            <summary>Class for the GX properties stored in file. </summary>
        </member>
        <member name="M:gx.gxPropertyFile.Flush">
            <summary>This function does nothing in the gxpropfile module. </summary>
        </member>
        <member name="M:gx.gxPropertyFile.#ctor">
            <summary>Class initialization. </summary>
        </member>
        <member name="M:gx.gxPropertyFile.#ctor(System.String)">
            <summary>Class initialization with module name (Unicode version). </summary>
            <param name="modname">Name of the module. </param>
        </member>
        <member name="M:gx.gxPropertyFile.Load(System.String)">
            <summary>Loads properties from a specified file (Unicode version). </summary>
            <param name="name">Name of the property file. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.Save(System.String,System.Boolean)">
            <summary>Saves properties into a specified file (Unicode version). </summary>
            <param name="name">Name of the property file. </param>
            <param name="unicode">If it is true, the file will be unicode. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.Save(System.String)">
            <summary>Saves properties into a specified file in ASCII format. </summary>
            <param name="name">Name of the property file. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.GetProperty(System.String)">
            <summary>Gets the value of the specified property (Unicode version). </summary>
            <remarks><p><p>If there is no such property in the property tree, it tries to return the value from the inherited path or the <i>/default</i> path of the tree.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>The value of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.GetPropertyInt(System.String)">
            <summary>Gets the integer value of the specified property (Unicode version). </summary>
            <remarks><p><p>If there is no such property in the property tree, it tries to return the value from the inherited path or the <i>/default</i> path of the tree.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>The integer value of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.GetPropertyFloat(System.String)">
            <summary>Gets the floating-point value of the specified property (Unicode version). </summary>
            <remarks><p><p>If there is no such property in the property tree, it tries to return the value from the inherited path or the <i>/default</i> path of the tree.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>The floating-point value of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.SetProperty(System.String,System.String)">
            <summary>Creates a property with the specified name in the property tree and assigns the specified value to it (Unicode version). </summary>
            <remarks><p><p>If the property exists it changes the value.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.SetProperty(System.String)">
            <summary>Creates a property with the specified name in the property tree with no value (Unicode version). </summary>
            <remarks><p><p>If the property exists it removes the value.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.SetProperty(System.String,System.Int32)">
            <summary>Creates a property with the specified name in the property tree and assigns the specified value to it (Unicode version). </summary>
            <remarks><p><p>If the property exists it changes the value. The integer value is converted to string and then written to the tree.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <param name="ivalue">Integer value of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.SetProperty(System.String,System.Double)">
            <summary>Creates a property with the specified name in the property tree and assigns the specified value to it (Unicode version). </summary>
            <remarks><p><p>If the property exists it changes the value. The floating-point value is converted to string and then written to the tree.</p></p></remarks>
            <param name="name">Name of the property and place in the property tree. </param>
            <param name="fvalue">Floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.ClearProperty(System.String)">
            <summary>Removes the value of the property in the property tree (Unicode version). </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.GetPropertyType(System.String)">
            <summary>Gets the type of a specified property (Unicode version). </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>Type of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.RmProperties(System.String)">
            <summary>Removes a property and its subproperties from the specified place in the property tree (Unicode version). </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.GetProperties(System.String)">
            <summary>Gets the subproperties of a specified property from the property tree. </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>The array of names. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.GetAllProperties(System.String)">
            <summary>Gets the subproperties and parents of a specified property from the property tree and from the <i>/default</i> subtree. </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>The array of names. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.SetPropertyParent(System.String,System.String)">
            <summary>Changes the parent of a specified property (Unicode version). </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <param name="str">Parent of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.GetPropertyParent(System.String)">
            <summary>Gets the parent of a specified property (Unicode version). </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>Parent of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.ClearPropertyParent(System.String)">
            <summary>Removes the parent link of a specified property (Unicode version). </summary>
            <param name="name">Name of the property and place in the property tree. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.GetModuleProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.GetModulePropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Integer value of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.GetModulePropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Floating-point value of the property. An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.SetModuleProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.SetModuleProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">Integer value of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.SetModuleProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">Floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned if an error occurs. </returns>
        </member>
        <member name="M:gx.gxPropertyFile._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxPropertyFile._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxPropertyFile.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.Open(System.String)">
            <summary>Opens a GX system compatible module with the default properties (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.Close">
            <summary>Closes a previously opened module. </summary>
            <remarks>It decreases the reference counter of the handle. The function closes the module if required (in case when the reference counter becames zero).</remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.IsValid">
            <summary>Checks if the handle of the module is valid. </summary>
            <returns>In case of existing handle the return value is true. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxPropertyFile.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="T:gx.gxSystem">
            <summary>Class for the GX-system specific operations. </summary>
        </member>
        <member name="M:gx.gxSystem.ClearError">
            <summary>Clears the thread-local error buffer in the GX system. </summary>
            <returns>On success: non-zero. </returns>
        </member>
        <member name="M:gx.gxSystem.SetError(System.Int32)">
            <summary>Overwrites the thread-local error in the GX system. </summary>
            <param name="code">The error code (see <see cref="T:gx.GX_ERROR_CODES"/>). </param>
            <returns>On success: non-zero. </returns>
        </member>
        <member name="M:gx.gxSystem.AppendError(System.Int32)">
            <summary>Appends the thread-local error in the GX system. </summary>
            <param name="code">The error code (see <see cref="T:gx.GX_ERROR_CODES"/>). </param>
            <returns>On success: non-zero. </returns>
        </member>
        <member name="M:gx.gxSystem.PrependError(System.Int32)">
            <summary>Prepends the thread-local error in the GX system. </summary>
            <param name="code">The error code (see <see cref="T:gx.GX_ERROR_CODES"/>). </param>
            <returns>On success: non-zero. </returns>
        </member>
        <member name="M:gx.gxSystem.SetError(System.Int32,System.Int32,System.String)">
            <summary>Updates the thread-local error in the GX system (Unicode version). </summary>
            <param name="flags">Modifier flags (see <see cref="T:gx.GX_ERROR_FLAGS"/>). </param>
            <param name="code">The error code (see <see cref="T:gx.GX_ERROR_CODES"/>). </param>
            <param name="str">The extension string. (The result will be the system's string plus your extension string.) </param>
            <returns>On success: non-zero. </returns>
        </member>
        <member name="M:gx.gxSystem.SetError(System.Int32,System.String)">
            <summary>Overwrites the thread-local error in the GX system (Unicode version). </summary>
            <param name="code">The error code (see <see cref="T:gx.GX_ERROR_CODES"/>). </param>
            <param name="str">The extension string. (The result will be the system's string plus your extension string.) </param>
            <returns>On success: non-zero. </returns>
        </member>
        <member name="M:gx.gxSystem.AppendError(System.Int32,System.String)">
            <summary>Appends the thread-local error in the GX system (Unicode version). </summary>
            <param name="code">The error code (see <see cref="T:gx.GX_ERROR_CODES"/>). </param>
            <param name="str">The extension string. (The result will be the system's string plus your extension string.) </param>
            <returns>On success: non-zero. </returns>
        </member>
        <member name="M:gx.gxSystem.PrependError(System.Int32,System.String)">
            <summary>Prepends the thread-local error in the GX system (Unicode version). </summary>
            <param name="code">The error code (see <see cref="T:gx.GX_ERROR_CODES"/>). </param>
            <param name="str">The extension string. (The result will be the system's string plus your extension string.) </param>
            <returns>On success: non-zero. </returns>
        </member>
        <member name="M:gx.gxSystem.GetErrorCode">
            <summary>Getting the error code. </summary>
            <returns>The error code. </returns>
        </member>
        <member name="M:gx.gxSystem.GetErrorString">
            <summary>Getting the error string in unicode format. </summary>
            <returns>The error string. </returns>
        </member>
        <member name="M:gx.gxSystem.ListDevices(System.UInt32,gx.gxDeviceInfo)">
            <summary>This function returns a filtered list of the available GX devices. </summary>
            <param name="flags">Flags for filter class. </param>
            <param name="filter">The filter class. </param>
            <returns>The array of founded devices. If an error occurred the function thrown an exception. </returns>
        </member>
        <member name="M:gx.gxSystem.PushError">
            <summary>This function pushes the error code and string to the error stack. </summary>
            <returns>On success: non-zero. </returns>
        </member>
        <member name="M:gx.gxSystem.PopError">
            <summary>This function pops the error code and string from the error stack. </summary>
            <returns>On success: non-zero. </returns>
        </member>
        <member name="M:gx.gxSystem.GetSystemInfo(gx.GX_SYSINFO_FLAGS)">
            <summary>Returns information about the GX system. </summary>
            <param name="flag">Flag to select the type of the information. </param>
            <returns>The result depends on the flag parameter. In case of error an exception is thrown. </returns>
        </member>
        <member name="T:gx.gxTrafo">
            <summary>Class for the transformation functions. </summary>
        </member>
        <member name="M:gx.gxTrafo._get_trafo">
            <summary>Returns the local trafo pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxTrafo._set_trafo(System.IntPtr)">
            <summary>Modifies the local trafo pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxTrafo.ref">
            <summary>It returns the reference counter. </summary>
            <remarks><p><p><see cref="T:gx.gxTRAFO"/> gx_reftrafo() gx_unreftrafo()</p></p></remarks>
            <returns>Reference counter of the <see cref="T:gx.gxTRAFO"/> structure. </returns>
        </member>
        <member name="M:gx.gxTrafo.xsize">
            <summary>It returns the horizontal size of the transformation area. </summary>
            <returns>Horizontal size of the transformation area. </returns>
        </member>
        <member name="M:gx.gxTrafo.ysize">
            <summary>It returns the vertical size of the transformation area. </summary>
            <returns>Vertical size of the transformation area. </returns>
        </member>
        <member name="M:gx.gxTrafo.#ctor">
            <summary>Class initialization with default properties. </summary>
        </member>
        <member name="M:gx.gxTrafo.#ctor(System.String)">
            <summary>Class initialization with the place of the properties (Unicode version). </summary>
            <param name="propname">Place of the properties in the property tree (Name of a property group). </param>
        </member>
        <member name="M:gx.gxTrafo.#ctor(System.String,System.String)">
            <summary>Class initialization with another trafo class, the place of the properties and name of the module (Unicode version). </summary>
            <param name="propname">Place of the properties in the property tree (Name of a property group). </param>
            <param name="modname">Name of the module. </param>
        </member>
        <member name="M:gx.gxTrafo.#ctor(gx.gxTrafoHandler)">
            <summary>Class initialization with another trafo handler. </summary>
            <param name="h">The source handler. </param>
        </member>
        <member name="M:gx.gxTrafo.#ctor(gx.gxTrafo)">
            <summary>Class initialization with another trafo. </summary>
            <param name="src">The source trafo. </param>
        </member>
        <member name="M:gx.gxTrafo.Dispose">
            <summary>Class termination. </summary>
        </member>
        <member name="M:gx.gxTrafo.#ctor">
        </member>
        <member name="M:gx.gxTrafo.Load(System.String)">
            <summary>Loads data from the specified transformation file to an initialized structure (Unicode version). </summary>
            <param name="filename">Name of the file containing the data. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.Save(System.String)">
            <summary>Saves the specified transformation structure to a file (Unicode version). </summary>
            <param name="filename">Name of the file. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.Copy(gx.gxTrafo)">
            <summary>Copies one transformation structure to another. </summary>
            <remarks>The destination structure must be initialized. Its data will be overwritten. The source structure remains unchanged.</remarks>
            <param name="source">Source transformation structure. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.Trafo(.gxPNT_ARRAY,.gxPNT_ARRAY)">
            <summary>Transforms points from the source sequence with the help of the specified structure then writes the result to the destination sequence list. </summary>
            <param name="source">List of source points. </param>
            <param name="target">Place of transformed points. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.IsValid">
            <summary>Checks the specified transformation structure. </summary>
            <returns>In case of existing structure the return value is non-zero. </returns>
        </member>
        <member name="M:gx.gxTrafo.FromVariant(gx.gxVariant)">
            <summary>Loads an embedded transformation structure from a variant. </summary>
            <param name="variant">Variant with an embedded transformation structure. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxTrafo.ToVariant(System.Int32)">
            <summary>Embedds the transformation structure into a variant. </summary>
            <param name="varid">The id for the created variant. </param>
            <returns>The variant class. On error false is returned and an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxTrafo._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxTrafo._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxTrafo.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.Open(System.String)">
            <summary>Opens a GX system compatible module with the default properties (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.Close">
            <summary>Closes a previously opened module. </summary>
            <remarks>It decreases the reference counter of the handle. The function closes the module if required (in case when the reference counter becames zero).</remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxTrafo.GetProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.GetPropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.GetPropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The floating-point value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.SetProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.SetProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">An integer value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.SetProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">A floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafo._set_trafo(gx.gxTRAFO@)">
            <summary>Modifies the local trafo pointer. </summary>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxTrafo._Dispose">
        </member>
        <member name="T:gx.gxTrafoData">
            <summary>Class for the TRAFO data and some low-level functions. </summary>
        </member>
        <member name="M:gx.gxTrafoData._get_trafo">
            <summary>Returns the local trafo data pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxTrafoData._set_trafo(System.IntPtr)">
            <summary>Modifies the local trafo data pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxTrafoData.#ctor">
            <summary>Class initialization. </summary>
        </member>
        <member name="M:gx.gxTrafoData.Dispose">
            <summary>Class termination. </summary>
        </member>
        <member name="M:gx.gxTrafoData.#ctor">
        </member>
        <member name="M:gx.gxTrafoData.ref">
            <summary>Returns the reference counter. </summary>
            <remarks><p><p><see cref="T:gx.gxTRAFO"/> gx_reftrafo() gx_unreftrafo()</p></p></remarks>
            <returns>Reference counter of the <see cref="T:gx.gxTRAFO"/> structure. </returns>
        </member>
        <member name="M:gx.gxTrafoData.xsize">
            <summary>Returns the horizontal size of the transformation area. </summary>
            <returns>Horizontal size of the transformation area. </returns>
        </member>
        <member name="M:gx.gxTrafoData.ysize">
            <summary>Returns the vertical size of the transformation area. </summary>
            <returns>Vertical size of the transformation area. </returns>
        </member>
        <member name="M:gx.gxTrafoData._Dispose">
        </member>
        <member name="T:gx.gxTrafoHandler">
            <summary>Class for the TRAFO functions. </summary>
        </member>
        <member name="M:gx.gxTrafoHandler.#ctor">
            <summary>Class initialization with default arguments. </summary>
        </member>
        <member name="M:gx.gxTrafoHandler.#ctor(System.String,System.String)">
            <summary>Class initialization with place of the properties and name of the module (Unicode version). </summary>
            <param name="propname">Place of the properties in the property tree (Name of a property group). </param>
            <param name="modname">Name of the module. </param>
        </member>
        <member name="M:gx.gxTrafoHandler.#ctor(System.String)">
            <summary>Class initialization with place of the properties (Unicode version). </summary>
            <param name="propname">Place of the properties in the property tree (Name of a property group). </param>
        </member>
        <member name="M:gx.gxTrafoHandler.#ctor(gx.gxTrafoHandler)">
            <summary>Class initalization with another trafo handle. </summary>
            <param name="src">Source trafo handle. The reference of this trafo handle will be increased. </param>
        </member>
        <member name="M:gx.gxTrafoHandler._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxTrafoHandler.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.Open(System.String)">
            <summary>Opens a GX system compatible module with the default properties (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.Close">
            <summary>Closes a previously opened module. </summary>
            <remarks>It decreases the reference counter of the handle. The function closes the module if required (in case when the reference counter becames zero).</remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.IsValid">
            <summary>Checks if the handle of the module is valid. </summary>
            <returns>In case of existing handle the return value is true. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.GetProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.GetPropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.GetPropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The floating-point value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.SetProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.SetProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">An integer value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.SetProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">A floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxTrafoHandler.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="T:gx.gxVariant">
            <summary>Class for the VARIANT functions. </summary>
        </member>
        <member name="M:gx.gxVariant.#ctor(gx.GX_VARIANT*)">
            <summary>Copy constructor from variant structure. </summary>
            <param name="source">Source variant. </param>
        </member>
        <member name="M:gx.gxVariant._get_variant">
            <summary>Returns the local variant data. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxVariant._set_variant(System.IntPtr)">
            <summary>Modifies the local variant data. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxVariant.#ctor">
            <summary>Constructor. </summary>
        </member>
        <member name="M:gx.gxVariant.Dispose">
            <summary>Destructor. </summary>
        </member>
        <member name="M:gx.gxVariant.#ctor">
        </member>
        <member name="M:gx.gxVariant.Ref">
            <summary>References the variant. </summary>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.Unref">
            <summary>Unreferences the variant. </summary>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.Create(System.Int32,System.Byte[])">
            <summary>Creates a new variant structure. </summary>
            <param name="id">Id of the new variant. </param>
            <param name="data">Binary data of the new variant. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.CreateEmpty(System.Int32,System.Int32)">
            <summary>Creates an empty variant structure. </summary>
            <param name="id">Id of the new variant. </param>
            <param name="type">Type of the new variant. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.Create(System.Int32,System.Int32)">
            <summary>Creates a new variant structure. </summary>
            <param name="id">Id of the new variant. </param>
            <param name="data">Binary data of the new variant. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.Create(System.Int32,System.Double)">
            <summary>Creates a new variant structure. </summary>
            <param name="id">Id of the new variant. </param>
            <param name="data">Binary data of the new variant. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.Create(System.Int32,System.String)">
            <summary>Creates a new variant structure (Unicode version). </summary>
            <param name="id">Id of the new variant. </param>
            <param name="unicode">String data of the new variant. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.Create(System.Int32,gx.gxPG4)">
            <summary>Creates a new variant structure. </summary>
            <param name="id">Id of the new variant. </param>
            <param name="frame">Frame data of the new variant. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.CreateEmptyList(System.Int32)">
            <summary>Creates an empty variant list structure. </summary>
            <param name="id">Id of the new variant list. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.Create(gx.gxVariant)">
            <summary>Creates a new variant structure from an existing variant. </summary>
            <param name="source">Source variant structure to duplicate. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.GetID">
            <summary>Returns the variant's id. </summary>
        </member>
        <member name="M:gx.gxVariant.GetType">
            <summary>Returns the variant's type. </summary>
        </member>
        <member name="M:gx.gxVariant.GetSize">
            <summary>Returns the variant's size. </summary>
        </member>
        <member name="M:gx.gxVariant.GetNItems">
            <summary>Returns the variant's number of items. </summary>
        </member>
        <member name="M:gx.gxVariant.GetNChildren">
            <summary>Returns the variant's number of children. </summary>
        </member>
        <member name="M:gx.gxVariant.GetInt">
            <summary>Returns the variant's data as an integer number. </summary>
        </member>
        <member name="M:gx.gxVariant.GetUInt">
            <summary>Returns the variant's data as an unsigned integer number. </summary>
        </member>
        <member name="M:gx.gxVariant.GetULInt">
            <summary>Returns the variant's data as an unsigned integer number. </summary>
        </member>
        <member name="M:gx.gxVariant.GetFloat">
            <summary>Returns the variant's data as a float number. </summary>
        </member>
        <member name="M:gx.gxVariant.GetUnicode(System.Int32)">
            <summary>Returns the variant's data as a string (Unicode version). </summary>
            <param name="tgtlen">Maximum number of characters to return. </param>
            <returns>The variant's data as a string. </returns>
        </member>
        <member name="M:gx.gxVariant.GetByteArray">
        </member>
        <member name="M:gx.gxVariant.GetItem(gx.gxVariant,System.Int32,System.Int32,System.Int32)">
            <summary>Returns the requested item from the variant list. </summary>
            <remarks><p><p>Depending on the flags the index specifies the index of the requested item itself or the starting index for searching for the item with the specified id.</p></p></remarks>
            <param name="target">Buffer for the result. </param>
            <param name="flags">Indexing flag ( see <see cref="T:gx.GX_VARIANT_FLAGS"/> ) </param>
            <param name="id">Id of the requested item. </param>
            <param name="ix">Index of the requested item. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.CutItem(gx.gxVariant,System.Int32,System.Int32,System.Int32)">
            <summary>Cuts and returns the requested item from the variant list. </summary>
            <remarks><p><p>Depending on the flags the index specifies the index of the requested item itself or the starting index for searching for the item with the specified id.</p></p></remarks>
            <param name="target">Buffer for the result. </param>
            <param name="flags">Indexing flag ( see <see cref="T:gx.GX_VARIANT_FLAGS"/> ) </param>
            <param name="id">The id of the requested to remove. </param>
            <param name="ix">Thi index of the requested item in the variable list. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.FindItem(gx.gxVariant)">
            <summary>Searches for a variant in the items list. </summary>
            <param name="item">Variant item to search for. </param>
            <returns>The index of the item or -1 if not found. </returns>
        </member>
        <member name="M:gx.gxVariant.AddItem(System.Int32,System.Int32,System.Int32,gx.gxVariant)">
            <summary>Adds a new item to the items list. </summary>
            <param name="flags">Indexing flag ( see <see cref="T:gx.GX_VARIANT_FLAGS"/> ). </param>
            <param name="id">The id of the item located on the position where to insert or append the new item. </param>
            <param name="ix">The index of the position where to insert or append the new item. </param>
            <param name="item">The new item to add to the list. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.RemoveItem(System.Int32,System.Int32,System.Int32)">
            <summary>Unreferences and deletes the item from the items list. </summary>
            <param name="flags">Indexing flag ( see <see cref="T:gx.GX_VARIANT_FLAGS"/> ). </param>
            <param name="id">The id of the item to remove. </param>
            <param name="ix">The index of the item to remove. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.GetChild(gx.gxVariant,System.Int32,System.Int32,System.Int32)">
            <summary>Returns a child from the children list. </summary>
            <param name="target">Preinitialized variant structure to return the result. </param>
            <param name="flags">Indexing flag ( see <see cref="T:gx.GX_VARIANT_FLAGS"/> ). </param>
            <param name="id">The id of the child. </param>
            <param name="ix">The index of the child. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.CutChild(gx.gxVariant,System.Int32,System.Int32,System.Int32)">
            <summary>Cuts a child from the children list. </summary>
            <param name="target">Preinitialized variant structure to return the result. </param>
            <param name="flags">Indexing flag ( see <see cref="T:gx.GX_VARIANT_FLAGS"/> ). </param>
            <param name="id">The id of the child. </param>
            <param name="ix">The index of the child. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.FindChild(gx.gxVariant)">
            <summary>Searches for a child in the children list. </summary>
            <param name="item">The child to search for. </param>
            <returns>The index of the child in the children list or -1 if not found. </returns>
        </member>
        <member name="M:gx.gxVariant.AddChild(System.Int32,System.Int32,System.Int32,gx.gxVariant)">
            <summary>Adds a child to the children list. </summary>
            <param name="flags">Indexing flag ( see <see cref="T:gx.GX_VARIANT_FLAGS"/> ). </param>
            <param name="id">The id of the item located on the position where to insert or append the new child. </param>
            <param name="ix">The index of the position where to insert or append the new child. </param>
            <param name="item">The new child to add to the children's list. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.RemoveChild(System.Int32,System.Int32,System.Int32)">
            <summary>Removes a child from the children list. </summary>
            <param name="flags">Indexing flag ( see <see cref="T:gx.GX_VARIANT_FLAGS"/> ). </param>
            <param name="id">The id of the child. </param>
            <param name="ix">The index of the position where the child is. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant.GetGxPG4">
            <summary>Returns the variant value as a <see cref="T:gx.gxPG4"/> structure. </summary>
        </member>
        <member name="M:gx.gxVariant.GetItemByPath(gx.gxVariant,System.String)">
            <summary>Returns a variant from a tree. </summary>
            <remarks><p>The variant data type can constitute a tree structure: every item in the tree is also a variant, and in turn can have child items. The item in the tree can be obtained by the path string, which has the following format:</p><p>condition[=value][,condition[=value]][/condition[=value][,condition[=value]]]</p><p>
<list type="bullet">
<item><p>1. the / character separates the levels of items in the tree </p></item>
<item><p>2. the , character separates the search conditions </p></item>
<item><p>3. the = character means the equality condition </p></item>
<item><p>4. the C character selects a child item </p></item>
<item><p>5. the L character selects a list item </p></item>
<item><p>6. the X character means the index of the item </p></item>
<item><p>7. the D character means the id of the item </p></item>
<item><p>8. the V character means the value of the item</p></item>
</list>

for example: <code> // get MRZ_NAME field from passport reader document object path=String.Format(&quot;C,D=%i/L,D=%i,V=%i&quot;,PRV_FIELDLIST,PRV_FIELD,PR_DF_MRZ_NAME);</code></p></remarks>
            <param name="target">Buffer for the result. </param>
            <param name="path">The path string. </param>
            <returns>On error false is returned or an exception is thrown. </returns>
        </member>
        <member name="M:gx.gxVariant._Dispose">
            <summary>Deletes the variant. </summary>
        </member>
        <member name="T:gx.gxWatchdog">
            <summary>Class for the watchdog functions. </summary>
        </member>
        <member name="M:gx.gxWatchdog.#ctor">
            <summary>Class initialization. </summary>
        </member>
        <member name="M:gx.gxWatchdog.#ctor(System.String,System.String)">
            <summary>Class initialization with place of the properties and name of the module (Unicode version). </summary>
            <param name="propname">Place of the properties in the property tree (Name of the property group). </param>
            <param name="modname">Name of the module. </param>
        </member>
        <member name="M:gx.gxWatchdog.#ctor(System.String)">
            <summary>Class initialization with place of the properties (Unicode version). </summary>
            <param name="propname">Place of the properties in the property tree (Name of the property group). </param>
        </member>
        <member name="M:gx.gxWatchdog.Set(System.Int32)">
            <summary>Updates the watchdog counter. </summary>
            <param name="timersec">Watchdog timer value in seconds. If it is zero it disables the watchdog. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxWatchdog._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxWatchdog.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.Open(System.String)">
            <summary>Opens a GX system compatible module with the default properties (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.Close">
            <summary>Closes a previously opened module. </summary>
            <remarks>It decreases the reference counter of the handle. The function closes the module if required (in case when the reference counter becames zero).</remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.IsValid">
            <summary>Checks if the handle of the module is valid. </summary>
            <returns>In case of existing handle the return value is true. </returns>
        </member>
        <member name="M:gx.gxWatchdog.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxWatchdog.GetProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.GetPropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.GetPropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The floating-point value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.SetProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.SetProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">An integer value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.SetProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">A floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxWatchdog.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="T:gx.gxZip">
            <summary>Class for the Zip functions. </summary>
            <remarks>The <see cref="T:gx.gxZip"/> class does not use properties. </remarks>
        </member>
        <member name="F:gx.gxZip._file_method">
            <summary>Compression method. </summary>
        </member>
        <member name="F:gx.gxZip._file_level">
            <summary>Compression level. </summary>
        </member>
        <member name="M:gx.gxZip.#ctor">
            <summary>Class initialization. </summary>
        </member>
        <member name="M:gx.gxZip.IsValid">
            <summary>Checks if the handler of a module is valid. </summary>
            <returns>In case of existing handler the return value is non-zero. </returns>
        </member>
        <member name="M:gx.gxZip.Create(System.String,System.Int32)">
            <summary>Creates a ZIP file (Unicode version). </summary>
            <param name="filename">Path and name of the ZIP file. </param>
            <param name="mode">Create mode (see <see cref="T:gx.GX_CREATEZIPMODES"/>). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.Open(System.String)">
            <summary>Opens a ZIP file (Unicode version). </summary>
            <param name="filename">Path and name of the ZIP file. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.Close(System.String)">
            <summary>Closes an opened/created ZIP file (Unicode version). </summary>
            <param name="comment">Comment string for the ZIP file. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.Close">
            <summary>Closes an opened/created ZIP file. </summary>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.GetNEntries">
            <summary>Gives the number of file entries in the archive. </summary>
            <returns>Number of file entries in the archive. If an error occurred the function will thrown an exception. </returns>
        </member>
        <member name="M:gx.gxZip.GetCommentLength">
            <summary>Gives the length of the comment field in bytes. </summary>
            <returns>Length of comment in bytes. If an error occurred the function will thrown an exception. </returns>
        </member>
        <member name="M:gx.gxZip.GetComment">
            <summary>Reads the comment from the archive (Unicode version). </summary>
            <returns>The comment string. If an error occurred the function will thrown an exception. </returns>
        </member>
        <member name="M:gx.gxZip.CreateFile(System.String,System.Int32,System.Int32,System.String,gx.gxZipFileInfo,System.String,System.UInt32,System.Byte[],System.Byte[])">
            <summary>Creates file in ZIP (Unicode version). </summary>
            <param name="filename">The name of the file in ZIP. </param>
            <param name="level">Compression level (see <see cref="T:gx.GX_ZLEVELS"/>). </param>
            <param name="strategy">Compression strategy (see <see cref="T:gx.GX_ZSTRATEGIES"/>). </param>
            <param name="comment">Comment for the file in the ZIP. </param>
            <param name="info">Detailed information for the file. </param>
            <param name="password">Password for the file. If you use encrypted file, fill the crc field also! </param>
            <param name="crc">CRC-32 value for the encrypted file. Set it to 0, if the file is not encryipted. </param>
            <param name="localexf">Local extra field. </param>
            <param name="globalexf">Global extra field. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.CreateFile(System.String,System.Int32,System.Int32,System.String,gx.gxZipFileInfo)">
            <summary>Creates file in ZIP (Unicode version). </summary>
            <param name="filename">The name of the file in ZIP. </param>
            <param name="level">Compression level (see <see cref="T:gx.GX_ZLEVELS"/>). </param>
            <param name="strategy">Compression strategy (see <see cref="T:gx.GX_ZSTRATEGIES"/>). </param>
            <param name="comment">Comment for the file in the ZIP. </param>
            <param name="info">Detailed information for the file. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.CreateFile(System.String,System.Int32,System.Int32,System.String)">
            <summary>Creates file in ZIP (Unicode version). </summary>
            <param name="filename">The name of the file in ZIP. </param>
            <param name="level">Compression level (see <see cref="T:gx.GX_ZLEVELS"/>). </param>
            <param name="strategy">Compression strategy (see <see cref="T:gx.GX_ZSTRATEGIES"/>). </param>
            <param name="comment">Comment for the file in the ZIP. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.WriteToFile(System.Byte[])">
            <summary>Writes data to the current file in the archive. </summary>
            <param name="data">The source data. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.CloseFile">
            <summary>Closes the current file in the archive. </summary>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.FirstFile">
            <summary>Sets marker to the first file in the archive. </summary>
            <returns>Returns true if no error. </returns>
        </member>
        <member name="M:gx.gxZip.NextFile">
            <summary>Sets marker to the next file in the archive. </summary>
            <returns>Returns true if no error. </returns>
        </member>
        <member name="M:gx.gxZip.LocateFile(System.String,System.Int32)">
            <summary>Sets marker to the specified file in the archive (Unicode version). </summary>
            <param name="filename">Name of the file in the archive. </param>
            <param name="casesensitivity"><p>Case sensitivity signification. It can be:
<list type="bullet">
<item><p>1: comparision is case sensitive (like strcmp)</p></item>
<item><p>2: comparision is not case sensitive (like strcmpi/strcasecmp)</p></item>
<item><p>0: case sensitivity is the default of your operation system (like 1 on Unix, 2 on Windows) </p></item>
</list>
</p></param>
            <returns>Returns true if no error. </returns>
        </member>
        <member name="M:gx.gxZip.GetFileInfo">
            <summary>Gives the information of the marked file. </summary>
            <returns>The information structure. If an error occurred the function will thrown an exception. </returns>
        </member>
        <member name="M:gx.gxZip.GetFileDetInfo">
            <summary>Gives the detailed information of the marked file. </summary>
            <returns>The information structure. If an error occurred the function will thrown an exception. </returns>
        </member>
        <member name="M:gx.gxZip.GetFileName">
            <summary>Retrieves the name of the file in the ZIP. </summary>
            <returns>Name of the file. If an error occurred the function will thrown an error. </returns>
        </member>
        <member name="M:gx.gxZip.GetFileComment">
            <summary>Retrieves the comment of the file in the ZIP. </summary>
            <returns>Comment of the file. If an error occurred the function will thrown an error. </returns>
        </member>
        <member name="M:gx.gxZip.GetFileGlobalExtraField">
            <summary>Retrieves the global extra field of the file in the ZIP. </summary>
            <returns>The global extra field of the file. If an error occurred the function will thrown an error. </returns>
        </member>
        <member name="M:gx.gxZip.OpenFile">
            <summary>Opens a marked file in the archive. </summary>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.OpenFile(System.String)">
            <summary>Opens a marked file in the archive (Unicode version). </summary>
            <param name="password">Password for authentication. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.GetFileMethod">
            <summary>Retrieves the method of the last opened file in the ZIP. </summary>
            <returns>Compression method of the last opened file. </returns>
        </member>
        <member name="M:gx.gxZip.GetFileLevel">
            <summary>Retrieves the compression level of the last opened file in the ZIP. </summary>
            <returns>Compression level of the last opened file. </returns>
        </member>
        <member name="M:gx.gxZip.ReadFromFile(System.Int32)">
            <summary>Reads the content of an opened file in the ZIP archive. </summary>
            <param name="len">Length of the allocated area in bytes. </param>
            <returns>The unpacked data. If an error occurred the function will thrown an exception. </returns>
        </member>
        <member name="M:gx.gxZip.CalculateCRC(System.UInt32,System.Byte[])">
            <summary>Calculates CRC-32 value from the specified buffer for the encrypted archive. </summary>
            <param name="initialcrc">The initial CRC-32 value. </param>
            <param name="buffer">The source data. </param>
            <returns>The calculated CRC value. If an error occurred the function throws an exception. </returns>
        </member>
        <member name="M:gx.gxZip.GetInitialCRC">
            <summary>Returns the initial CRC for the <see cref="M:gx.gxZip.CalculateCRC(System.UInt32,System.Byte[])"/>. </summary>
            <returns>The initial CRC. If an error occurred the function throws an exception. </returns>
        </member>
        <member name="M:gx.gxZip.ReadLocalExtraField(System.Int32)">
            <summary>Retrieves the local extra field of the marked file in the archive. </summary>
            <param name="maxlen">The maximal length of the allocated area. </param>
            <returns>Local extra field of the file. If an error occurred the function will thrown an error. </returns>
        </member>
        <member name="M:gx.gxZip._get_handle">
            <summary>Returns the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <returns>Current value. </returns>
        </member>
        <member name="M:gx.gxZip._set_handle(System.UInt32)">
            <summary>Modifies the local handle pointer. </summary>
            <remarks><p><p>Do not use this function directly.</p></p></remarks>
            <param name="ptr">New value. </param>
        </member>
        <member name="M:gx.gxZip.Open(System.String,System.String)">
            <summary>Opens a GX system compatible module (Unicode version). </summary>
            <param name="modulename">Name of the module. </param>
            <param name="groupname">Property place in the property tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.Call(System.Int32,System::IntPtr)">
            <summary>Calls a process of the module with its parameters. </summary>
            <remarks>The functions and parameters usable inside the modules can be found in the documentation of the modules. The headers given with the modules contain inline functions, which make easier to access the functions of the module.</remarks>
            <param name="callcode">Call code for the function (GX_CALL_xxx call codes). </param>
            <param name="params">Parameters to give for the function (GX_PARM_xxx structures). </param>
            <returns>Module defined, usually success is true. </returns>
        </member>
        <member name="M:gx.gxZip.GetProperty(System.String)">
            <summary>Gets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>Value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.GetPropertyInt(System.String)">
            <summary>Gets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.GetPropertyFloat(System.String)">
            <summary>Gets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The floating-point value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.GetPropertyVersion(System.String)">
            <summary>Gets a version property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <returns>The integer value of the property or an exception is thrown in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.SetProperty(System.String,System.String)">
            <summary>Sets a property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="str">Value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.SetProperty(System.String,System.Int32)">
            <summary>Sets an integer property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="ivalue">An integer value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.SetProperty(System.String,System.Double)">
            <summary>Sets a floating-point property of the specified module (Unicode version). </summary>
            <param name="name">Name of the property. </param>
            <param name="fvalue">A floating-point value of the property. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.SaveProperties(System.String,System.Int32)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <param name="level">Higher numbers give more details (0 = basic properties, 100 = all properties). </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.SaveProperties(System.String)">
            <summary>Saves the properties of a module stored in the memory to a branch of the property tree stored on a mass storage device (Unicode version). </summary>
            <param name="name">Place of property in the tree. </param>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.MPStartTransaction">
            <summary>It starts the property transaction. </summary>
            <remarks><p>The module accepts but doesn't update properties (setmoduleproperty). You must use 'gx_mpcommit' to update these properties. <p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="M:gx.gxZip.MPCommit">
            <summary>It ends the property transaction and updates your changes to module. </summary>
            <remarks><p><p>Not supported by each module! </p></p></remarks>
            <returns>An exception is thrown or false is returned in case of error. </returns>
        </member>
        <member name="T:gx.GX_ERROR_CODES">
            <summary>System and GX-specific error codes. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_ENOERR">
            <summary>No Error. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_ENOENT">
            <summary>Entry not found (ENOENT). </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_ENOMEM">
            <summary>Memory allocation error (ENOMEM). </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EACCES">
            <summary>Permission denied (EACCES). </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EFAULT">
            <summary>Bad address or program error (EFAULT). </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EBUSY">
            <summary>Resource busy (EBUSY). </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EEXIST">
            <summary>File exists (EEXIST). </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_ENODEV">
            <summary>No such device (ENODEV). </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EINVAL">
            <summary>Invalid parameter (EINVAL). </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_ERANGE">
            <summary>Data out of range (ERANGE). </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EDATA">
            <summary>No data available (Linux - ENODATA). </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_ECOMM">
            <summary>Communication error on send (Linux - ECOMM). </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_ETIMEDOUT">
            <summary>Function timed out (Linux - ETIMEDOUT). </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EOPEN">
            <summary>File open error. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_ECREAT">
            <summary>File creation error. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EREAD">
            <summary>File read error. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EWRITE">
            <summary>File write error. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EFILE">
            <summary>Invalid file content. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EINVIMG">
            <summary>Invalid image. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EINVFUNC">
            <summary>Invalid function. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EHWKEY">
            <summary>Hardware key does not work properly. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EVERSION">
            <summary>Invalid version. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EASSERT">
            <summary>Assertion occurred. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EDISCON">
            <summary>Device is disconnected. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EIMGPROC">
            <summary>Image processing failed. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_EAUTH">
            <summary>Authenticity cannot be determined. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_ELIC">
            <summary>Licence handling error. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_ENNCLIMIT">
            <summary>Limit of the licence reached: no further OCR process can be done. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_ENNCNLO">
            <summary>NNC device is no longer operational. </summary>
        </member>
        <member name="F:gx.GX_ERROR_CODES.GX_ENOMODULE">
            <summary>The specified module cannot be found (module: 'ls'). </summary>
        </member>
        <member name="T:gx.GX_PIXELFORMATS">
            <summary>Enumerations for pixel format. </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_UNDEF">
            <summary>Undefined format (for gx_loadimage() functions). </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_GRAY">
            <summary>8 bit: 8 bit (grayscale) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_RGB555">
            <summary>16 bit: 1-5-5-5 bit (0,R,G,B) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_BGR555">
            <summary>16 bit: 1-5-5-5 bit (0,B,G,R) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_RGB565">
            <summary>16 bit: 5-6-5 bit (R,G,B) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_BGR565">
            <summary>16 bit: 5-6-5 bit (B,G,R) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_RGB">
            <summary>24 bit: 8-8-8 bit (R,G,B) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_BGR">
            <summary>24 bit: 8-8-8 bit (B,G,R) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_RGBA">
            <summary>32 bit: 8-8-8-8 bit (R,G,B,0) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_BGRA">
            <summary>32 bit: 8-8-8-8 bit (B,G,R,0) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_YUV422">
            <summary>32 bit/2 pixel: 8-8-8-8 bit (U,Y1,V,Y2) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_GRAY12">
            <summary>16 bit: 4-12 bit (0,grayscale) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_RGB12">
            <summary>48 bit: 4-12-4-12-4-12 bit (0,R,0,G,0,B) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_BGR12">
            <summary>48 bit: 4-12-4-12-4-12 bit (0,B,0,G,0,R) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_GBRG">
            <summary>32 bit/4 pixel: 8-8-8-8 bit Bayern-pattern (G,B,R,G) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_BGGR">
            <summary>32 bit/4 pixel: 8-8-8-8 bit Bayern-pattern (B,G,G,R) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_RGGB">
            <summary>32 bit/4 pixel: 8-8-8-8 bit Bayern-pattern (R,G,G,B) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_GRBG">
            <summary>32 bit/4 pixel: 8-8-8-8 bit Bayern-pattern (G,R,B,G) </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_FORMAT_FIRST">
            <summary>First available pixel format. </summary>
        </member>
        <member name="F:gx.GX_PIXELFORMATS.GX_FORMAT_LAST">
            <summary>Last available pixel format. </summary>
        </member>
        <member name="T:gx.GX_IMGFILEFORMATS">
            <summary>Enumerations for image file format. </summary>
        </member>
        <member name="F:gx.GX_IMGFILEFORMATS.GX_BMP">
            <summary>BMP format. </summary>
        </member>
        <member name="F:gx.GX_IMGFILEFORMATS.GX_JPEG">
            <summary>JPEG format (ISO/IEC 10918-1). </summary>
        </member>
        <member name="F:gx.GX_IMGFILEFORMATS.GX_JPEG2K_JPC">
            <summary>JPEG-2000 Code stream syntax (ISO/IEC 15444-1). </summary>
        </member>
        <member name="F:gx.GX_IMGFILEFORMATS.GX_JPEG2K_JP2">
            <summary>JPEG-2000 JP2 format syntax (ISO/IEC 15444-1). </summary>
        </member>
        <member name="F:gx.GX_IMGFILEFORMATS.GX_JPEG2K">
            <summary>JPEG-2000 JP2 format syntax (ISO/IEC 15444-1). </summary>
        </member>
        <member name="F:gx.GX_IMGFILEFORMATS.GX_RAW">
            <summary>RAW format (uncompressed pixel data without header). </summary>
        </member>
        <member name="F:gx.GX_IMGFILEFORMATS.GX_PNG">
            <summary>PNG format (Portable Network Graphics). </summary>
        </member>
        <member name="F:gx.GX_IMGFILEFORMATS.GX_WSQ">
            <summary>WSQ format (Wavelet Scalar Quantization). </summary>
        </member>
        <member name="T:gx.GX_MIRRORFLAGS">
            <summary>Enumerations for mirror operations. </summary>
        </member>
        <member name="F:gx.GX_MIRRORFLAGS.GX_MIRROR_NOMIRROR">
            <summary>No mirroring. </summary>
        </member>
        <member name="F:gx.GX_MIRRORFLAGS.GX_MIRROR_HORIZONTAL">
            <summary>Horizontal mirroring. </summary>
        </member>
        <member name="F:gx.GX_MIRRORFLAGS.GX_MIRROR_VERTICAL">
            <summary>Vertical mirroring. </summary>
        </member>
        <member name="T:gx.GX_ZOOMMODES">
            <summary>Enumerations for zoom modes. </summary>
        </member>
        <member name="F:gx.GX_ZOOMMODES.GX_ZOOM_NEAREST">
            <summary>Nearest algorithm (faster than linear). </summary>
        </member>
        <member name="F:gx.GX_ZOOMMODES.GX_ZOOM_LINEAR">
            <summary>Linear algorithm (better than nearest). </summary>
        </member>
        <member name="T:gx.GX_QUICKCONVERT">
            <summary>Enumerations for quick convert. </summary>
        </member>
        <member name="F:gx.GX_QUICKCONVERT.GX_CONVERT_NORMAL">
            <summary>Normal algorithm. </summary>
        </member>
        <member name="F:gx.GX_QUICKCONVERT.GX_CONVERT_QUICK">
            <summary>Quick algorithm. </summary>
        </member>
        <member name="T:gx.GX_QUICKDISPLAY">
            <summary>Enumerations for quick display. </summary>
        </member>
        <member name="F:gx.GX_QUICKDISPLAY.GX_DISPLAY_NORMAL">
            <summary>Normal algorithm. </summary>
        </member>
        <member name="F:gx.GX_QUICKDISPLAY.GX_DISPLAY_QUICK">
            <summary>Quick algorithm. </summary>
        </member>
        <member name="T:gx.GX_IMAGECOMMENTS">
            <summary>Enumerations for image comments. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_GENERAL">
            <summary>Type of the general image comment. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP0">
            <summary>APP0 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP1">
            <summary>APP1 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP2">
            <summary>APP2 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP3">
            <summary>APP3 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP4">
            <summary>APP4 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP5">
            <summary>APP5 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP6">
            <summary>APP6 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP7">
            <summary>APP7 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP8">
            <summary>APP8 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP9">
            <summary>APP9 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP10">
            <summary>APP10 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP11">
            <summary>APP11 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP12">
            <summary>APP12 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP13">
            <summary>APP13 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP14">
            <summary>APP14 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_JPEG_APP15">
            <summary>APP15 comment for jpeg applications. </summary>
        </member>
        <member name="F:gx.GX_IMAGECOMMENTS.GX_IMGCOMM_INVALIDFORMAT">
            <summary>Invalid format signal at image loading. </summary>
        </member>
        <member name="T:gx.GX_IMAGEPROPERTIES1">
            <summary>Enumerations for image properties. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_BMP_FORCE24BPP">
            <summary>Identifier for bmp/force24bpp property. </summary>
            <remarks><p>The BMP writer forces the 24 bit per pixel mode. It can be:
<list type="bullet">
<item><p>0 : the indexed mode is used instead (default)</p></item>
<item><p>1 : the writer uses 24 bit per pixel (RGB/BGR) mode (faster than indexed) </p></item>
</list>
</p></remarks>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_BMP_ENABLERLE">
            <summary>Identifier for bmp/enablerle property. </summary>
            <remarks><p>The BMP writer can use the RLE compression. It can be:
<list type="bullet">
<item><p>0 : disables the RLE compression (faster, default)</p></item>
<item><p>1 : enables the RLE compression </p></item>
</list>
</p></remarks>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG_SCALE_NUM">
            <summary>Identifier for jpeg/decompress/scale_num property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG_SCALE_DENOM">
            <summary>Identifier for jpeg/decompress/scale_denom property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG_DCT_METHOD">
            <summary>Identifier for jpeg/decompress/dct_method property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG_DO_FANCY_UPSAMPLING">
            <summary>Identifier for jpeg/decompress/do_fancy_unsampling property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG_DO_BLOCK_SMOOTHING">
            <summary>Identifier for jpeg/decompress/do_block_smoothing property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG_QUALITY">
            <summary>Identifier for jpeg/compress/quality property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG_PROGRESSIVE">
            <summary>Identifier for jpeg/compress/progressive property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG_OPTIMIZE_CODING">
            <summary>Identifier for jpeg/compress/optimize_coding property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG_RESTART_INTERVAL">
            <summary>Identifier for jpeg/compress/restart_interval property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG_RESTART_IN_ROWS">
            <summary>Identifier for jpeg/compress/restart_in_rows property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG_SMOOTHING_FACTOR">
            <summary>Identifier for jpeg/compress/smoothing_factor property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_IMGAREATLX">
            <summary>Identifier for jpeg2k/imgareatlx property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_IMGAREATLY">
            <summary>Identifier for jpeg2k/imgareatly property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_TILEGRDTLX">
            <summary>Identifier for jpeg2k/tilegrdtlx property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_TILEGRDTLY">
            <summary>Identifier for jpeg2k/tilegrdtly property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_TILEWIDTH">
            <summary>Identifier for jpeg2k/tilewidth property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_TILEHEIGHT">
            <summary>Identifier for jpeg2k/tileheight property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_PRCWIDTH">
            <summary>Identifier for jpeg2k/prcwidth property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_PRCHEIGHT">
            <summary>Identifier for jpeg2k/prcheight property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_CBLKWIDTH">
            <summary>Identifier for jpeg2k/cblkwidth property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_CBLKHEIGHT">
            <summary>Identifier for jpeg2k/cblkheight property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_MODE">
            <summary>Identifier for jpeg2k/mode property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_RATE">
            <summary>Identifier for jpeg2k/rate property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_ILYRRATES">
            <summary>Identifier for jpeg2k/ilyrrates property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_PRG">
            <summary>Identifier for jpeg2k/prg property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_NOMCT">
            <summary>Identifier for jpeg2k/nomct property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_NUMRLVLS">
            <summary>Identifier for jpeg2k/numrlvls property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_SOP">
            <summary>Identifier for jpeg2k/sop property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_EPH">
            <summary>Identifier for jpeg2k/eph property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_LAZY">
            <summary>Identifier for jpeg2k/lazy property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_TERMALL">
            <summary>Identifier for jpeg2k/termall property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_SEGSYM">
            <summary>Identifier for jpeg2k/segsym property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_VCAUSAL">
            <summary>Identifier for jpeg2k/vcausal property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_PTERM">
            <summary>Identifier for jpeg2k/pterm property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_RESETPROB">
            <summary>Identifier for jpeg2k/resetprob property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_JPEG2K_NUMGBITS">
            <summary>Identifier for jpeg2k/numgbits property. </summary>
        </member>
        <member name="F:gx.GX_IMAGEPROPERTIES1.GX_IMGPROP_WSQ_BITRATE">
            <summary>Identifier for WSQ bitrate property. </summary>
        </member>
        <member name="T:gx.GX_COLORADJUST_FLAGS">
            <summary>Flags for color adjust functions. </summary>
        </member>
        <member name="F:gx.GX_COLORADJUST_FLAGS.GX_COLORADJUST_BRIGHTNESS_BASIC">
            <summary>Basic brightness manipulating method. </summary>
        </member>
        <member name="F:gx.GX_COLORADJUST_FLAGS.GX_COLORADJUST_BRIGHTNESS_ADVANCED">
            <summary>Advanced brightness manipulating method. </summary>
        </member>
        <member name="F:gx.GX_COLORADJUST_FLAGS.GX_COLORADJUST_CONTRAST_BASIC">
            <summary>Basic contrast manipulating method. </summary>
        </member>
        <member name="F:gx.GX_COLORADJUST_FLAGS.GX_COLORADJUST_CONTRAST_ADVANCED">
            <summary>Advanced contrast manipulating method. </summary>
        </member>
        <member name="T:gx.GX_COMPOSE_FLAGS">
            <summary>Flags for image compose functions. </summary>
        </member>
        <member name="F:gx.GX_COMPOSE_FLAGS.GX_COMPOSE_DONT_ENLARGE_IMAGE">
            <summary>Do not enlarge image if the upper image is larger the the other. </summary>
        </member>
        <member name="F:gx.GX_COMPOSE_FLAGS.GX_COMPOSE_ENLARGE_IMAGE">
            <summary>Enlarge image if the upper image is larger the the other. </summary>
        </member>
        <member name="F:gx.GX_COMPOSE_FLAGS.GX_COMPOSE_ALPHA">
            <summary>Basic composing when one image is over the other one, and alpha chanel is defined. </summary>
        </member>
        <member name="F:gx.GX_COMPOSE_FLAGS.GX_COMPOSE_WEIGHTING">
            <summary>Weighting of two images. </summary>
        </member>
        <member name="T:gx.GX_TEXT_FLAGS">
            <summary>Flags for text draw functions. </summary>
        </member>
        <member name="F:gx.GX_TEXT_FLAGS.GX_TEXT_ITALIC">
            <summary>The characters of the text are italic. </summary>
        </member>
        <member name="F:gx.GX_TEXT_FLAGS.GX_TEXT_STRAIGHT">
            <summary>The characters of the text are straight. </summary>
        </member>
        <member name="F:gx.GX_TEXT_FLAGS.GX_TEXT_BOLD">
            <summary>The characters of the text are bold. </summary>
        </member>
        <member name="F:gx.GX_TEXT_FLAGS.GX_TEXT_NORMAL">
            <summary>The characters of the text are normal. </summary>
        </member>
        <member name="F:gx.GX_TEXT_FLAGS.GX_TEXT_THIN">
            <summary>The characters of the text are thin. </summary>
        </member>
        <member name="T:gx.GX_LOGLEVELS">
            <summary>Enumerations for the log levels. </summary>
        </member>
        <member name="F:gx.GX_LOGLEVELS.GX_NONE">
            <summary>No log messages. </summary>
        </member>
        <member name="F:gx.GX_LOGLEVELS.GX_EMERG">
            <summary>Emergency messages, application broken and probably loss of data. </summary>
        </member>
        <member name="F:gx.GX_LOGLEVELS.GX_FATAL">
            <summary>Fatal error, the application can not be continued. </summary>
        </member>
        <member name="F:gx.GX_LOGLEVELS.GX_ERROR">
            <summary>Normal error, the application can be continued or terminated with error. </summary>
        </member>
        <member name="F:gx.GX_LOGLEVELS.GX_WARN">
            <summary>Warning messages, the application can be continued. </summary>
        </member>
        <member name="F:gx.GX_LOGLEVELS.GX_INFO">
            <summary>Information 1. </summary>
        </member>
        <member name="F:gx.GX_LOGLEVELS.GX_INFO2">
            <summary>Information 2. </summary>
        </member>
        <member name="F:gx.GX_LOGLEVELS.GX_INFO3">
            <summary>Information 3. </summary>
        </member>
        <member name="F:gx.GX_LOGLEVELS.GX_DEBUG">
            <summary>Normal debug. </summary>
            <remarks>(Only if the NDEBUG was not defined) </remarks>
        </member>
        <member name="F:gx.GX_LOGLEVELS.GX_DEBUG2">
            <summary>Debug in low-level mode. </summary>
            <remarks>(Only if the NDEBUG was not defined) </remarks>
        </member>
        <member name="T:gx.GX_PROPERTYTYPES">
            <summary>Enumerations for property types. </summary>
        </member>
        <member name="F:gx.GX_PROPERTYTYPES.GX_PROPERTY_INVALID">
            <summary>The item is not found in the property tree. </summary>
        </member>
        <member name="F:gx.GX_PROPERTYTYPES.GX_PROPERTY_NOVALUE">
            <summary>Property without value. </summary>
        </member>
        <member name="F:gx.GX_PROPERTYTYPES.GX_PROPERTY_DIRECT">
            <summary>Property with direct value. </summary>
        </member>
        <member name="F:gx.GX_PROPERTYTYPES.GX_PROPERTY_INHERIT">
            <summary>Property with inherited value. </summary>
        </member>
        <member name="F:gx.GX_PROPERTYTYPES.GX_PROPERTY_DEFAULT">
            <summary>Property value in the default group. </summary>
        </member>
        <member name="T:gx.GX_ERROR_FLAGS">
            <summary>Enumerations for flags parameter of gx_seterror() function. </summary>
        </member>
        <member name="F:gx.GX_ERROR_FLAGS.GX_ERR_FLAG_CLEAR">
            <summary>Clears the thread-local buffer of the error. </summary>
        </member>
        <member name="F:gx.GX_ERROR_FLAGS.GX_ERR_FLAG_APPEND">
            <summary>Inserts the text to the end of the buffer. </summary>
        </member>
        <member name="F:gx.GX_ERROR_FLAGS.GX_ERR_FLAG_PREPEND">
            <summary>Inserts the text to the start of the buffer. </summary>
        </member>
        <member name="F:gx.GX_ERROR_FLAGS.GX_ERR_FLAG_APPMODE">
            <summary>Default flag for GX applications. </summary>
        </member>
        <member name="F:gx.GX_ERROR_FLAGS.GX_ERR_FLAG_NOARGS">
            <summary>The function doesn't use the argument parameter. </summary>
        </member>
        <member name="F:gx.GX_ERROR_FLAGS.GX_ERR_FLAG_LOCAL">
            <summary>Do not use this! (It is required for backward compatibility). </summary>
        </member>
        <member name="F:gx.GX_ERROR_FLAGS.GX_ERR_FLAG_DIRECT">
            <summary>Do not use the default error string. </summary>
        </member>
        <member name="T:gx.GX_INFO_IDS">
            <summary>Identification numbers for gxMODULEINFO structure (for GXSD 7.x modules). </summary>
        </member>
        <member name="F:gx.GX_INFO_IDS.GXMODULE_INFO_ID">
            <summary>Module identification number for gxMODULEINFO structure (for GXSD 7.x modules). </summary>
        </member>
        <member name="F:gx.GX_INFO_IDS.GXUSRDRV_INFO_ID">
            <summary>User driver identification number for gxMODULEINFO structure (for GXSD 7.x modules). </summary>
        </member>
        <member name="T:gx.GX_DEVICE_FLAGS">
            <summary>Flags for device operations. </summary>
        </member>
        <member name="F:gx.GX_DEVICE_FLAGS.GX_DEVICE_FLAG_TYPE">
            <summary>Type of the device. </summary>
        </member>
        <member name="F:gx.GX_DEVICE_FLAGS.GX_DEVICE_FLAG_NAME">
            <summary>Name of the device. </summary>
        </member>
        <member name="F:gx.GX_DEVICE_FLAGS.GX_DEVICE_FLAG_SERIAL">
            <summary>Serial number of the device. </summary>
        </member>
        <member name="F:gx.GX_DEVICE_FLAGS.GX_DEVICE_FLAG_SERIAL_NOMSK">
            <summary>NNC serial number of the device. </summary>
        </member>
        <member name="F:gx.GX_DEVICE_FLAGS.GX_DEVICE_FLAG_EXCLUSIVE">
            <summary>Exclusive open mode. </summary>
        </member>
        <member name="T:gx.GX_SYSINFO_FLAGS">
            <summary>Flags for querying the GX system info. </summary>
        </member>
        <member name="F:gx.GX_SYSINFO_FLAGS.GX_SYSINFO_FLAG_FREEFLOW">
            <summary>Querying the number of the freeflow licence. </summary>
        </member>
        <member name="F:gx.GX_SYSINFO_FLAGS.GX_SYSINFO_FLAG_PARKING">
            <summary>Querying the number of the parking licence. </summary>
        </member>
        <member name="F:gx.GX_SYSINFO_FLAGS.GX_SYSINFO_FLAG_ACCR">
            <summary>Querying the number of the container licence. </summary>
        </member>
        <member name="F:gx.GX_SYSINFO_FLAGS.GX_SYSINFO_FLAG_PARKINGLANE">
            <summary>Querying the number of the parking lane licence. </summary>
        </member>
        <member name="F:gx.GX_SYSINFO_FLAGS.GX_SYSINFO_FLAG_FACE">
            <summary>Querying the number of the face ident licence. </summary>
        </member>
        <member name="F:gx.GX_SYSINFO_FLAGS.GX_SYSINFO_FLAG_PR">
            <summary>Querying the number of the passport reader licence. </summary>
        </member>
        <member name="gx.GX_VARIANT_INCL">
        </member>
        <member name="T:gx.GX_VARIANT_TYPES">
            <summary>Available variant types. </summary>
            <remarks><p><p>The values with <i><b>_AC_</b> tag</i> are usable in creation operation only. For these types the value is automatically converted to the proper data type. </p><p>The values with <i><b>_AS_</b> tag</i> are usable in creation operation only. For these types the value is automatically converted to the proper string type. </p></p></remarks>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_NULL">
            <summary>NULL type (size: 0; nitems: 1). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_INT">
            <summary>Integer type (size: 0, 1, 2, 4, 8; nitems: 1). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_UINT">
            <summary>Unsigned integer type (size: 0, 1, 2, 4, 8; nitems: 1). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_FLOAT">
            <summary>Floating-point type (size: 0, 4, 8; nitems: 1). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_DATETIME">
            <summary>Datetime type (size: 0, 8; nitems: 1). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_ARRAY">
            <summary>NULL type array /NULL array/ (size: 0; nitems: x). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_INTARRAY">
            <summary>Integer type array (size: 0, 1, 2, 4, 8; nitems: x). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_UINTARRAY">
            <summary>Unsigned integer type array (size: 0, 1, 2, 4, 8; nitems: x). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_FLOATARRAY">
            <summary>Float type array (size: 0, 4, 8; nitems: x). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_DATETIMEARRAY">
            <summary>Datetime type array (size: 0, 8; nitems: x). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_LIST">
            <summary>List type (size=nitems: number of items). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_BINARY">
            <summary>Binary (size=number of bytes; nitems: 1). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_ASCII">
            <summary>String in ASCII format (size=number of characters; nitems: 1). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_UNICODE">
            <summary>String in unicode format (size=number of characters; nitems: 1). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_CONTAINER">
            <summary>Internally used binary structure (size=number of codes; nitems: 1). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_AC_ASCII">
            <summary>String in ASCII format (size=number of characters; nitems: 1) (see note above). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_AC_UNICODE">
            <summary>String in unicode format (size=number of characters; nitems: 1) (see note above). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_AS_ASCII">
            <summary>String in ASCII format (size=number of characters; nitems: 1) (see note above). </summary>
        </member>
        <member name="F:gx.GX_VARIANT_TYPES.GX_VARIANT_AS_UNICODE">
            <summary>String in unicode format (size=number of characters; nitems: 1) (see note above). </summary>
        </member>
        <member name="T:gx.GX_VARIANT_FLAGS">
            <summary>Flags for list item and child indexing functions. </summary>
        </member>
        <member name="F:gx.GX_VARIANT_FLAGS.GX_VARIANT_BY_INDEX">
            <summary>Select the <i><b>ix</b> -th</i> item. </summary>
        </member>
        <member name="F:gx.GX_VARIANT_FLAGS.GX_VARIANT_BY_ID">
            <summary>Search by <i><b>id</b>.</i></summary>
        </member>
        <member name="F:gx.GX_VARIANT_FLAGS.GX_VARIANT_BY_INDEX_AND_ID">
            <summary>Search for an item with <i><b>id</b>,</i> starting from the <i><b>ix</b> -th</i> item. </summary>
        </member>
        <member name="F:gx.GX_VARIANT_FLAGS.GX_VARIANT_BY_ORDER_AND_ID">
            <summary>Search for the <i><b>ix</b> -th</i> item with the specified <i><b>id</b>.</i></summary>
        </member>
        <member name="F:gx.GX_VARIANT_FLAGS.GX_VARIANT_BY_NAME">
            <summary>Search by <i><b>name</b>.</i></summary>
        </member>
        <member name="F:gx.GX_VARIANT_FLAGS.GX_VARIANT_BY_INDEX_AND_NAME">
            <summary>Search for an item with <i><b>name</b>,</i> starting from the <i><b>ix</b> -th</i> item. </summary>
        </member>
        <member name="F:gx.GX_VARIANT_FLAGS.GX_VARIANT_BY_ORDER_AND_NAME">
            <summary>Search for the <i><b>ix</b> -th</i> item with the specified <i><b>name</b>.</i></summary>
        </member>
        <member name="F:gx.GX_VARIANT_FLAGS.GX_VARIANT_APPEND">
            <summary>Appending after the index position instead of inserting. </summary>
        </member>
        <member name="F:gx.GX_VARIANT_FLAGS.GX_VARIANT_LAST">
            <summary>Select the last item. </summary>
        </member>
        <member name="gx.CreateFileOld">
        </member>
        <member name="gx.CreateFile">
        </member>
        <member name="T:gx.GX_ZLEVELS">
            <summary>Compression levels (0-9). </summary>
        </member>
        <member name="F:gx.GX_ZLEVELS.GX_Z_NO_COMPRESSION">
            <summary>No compression (0). </summary>
        </member>
        <member name="F:gx.GX_ZLEVELS.GX_Z_BEST_SPEED">
            <summary>Best speed (1). </summary>
        </member>
        <member name="F:gx.GX_ZLEVELS.GX_Z_BEST_COMPRESSION">
            <summary>Best compression (9). </summary>
        </member>
        <member name="F:gx.GX_ZLEVELS.GX_Z_DEFAULT_COMPRESSION">
            <summary>Default compression level. </summary>
        </member>
        <member name="T:gx.GX_ZSTRATEGIES">
            <summary>Compression strategies. </summary>
        </member>
        <member name="F:gx.GX_ZSTRATEGIES.GX_Z_FILTERED">
            <summary>Force more Huffman coding and less string matching. </summary>
        </member>
        <member name="F:gx.GX_ZSTRATEGIES.GX_Z_HUFFMAN_ONLY">
            <summary>Force Huffman encoding only (no string match). </summary>
        </member>
        <member name="F:gx.GX_ZSTRATEGIES.GX_Z_RLE">
            <summary>RLE is fast as Huffman, but give better compression for PNG image data. </summary>
        </member>
        <member name="F:gx.GX_ZSTRATEGIES.GX_Z_FIXED">
            <summary>Prevents the use of dynamic Huffman codes, allowing for a simpler decoder. </summary>
        </member>
        <member name="F:gx.GX_ZSTRATEGIES.GX_Z_DEFAULT_STRATEGY">
            <summary>Use for normal data. </summary>
        </member>
        <member name="T:gx.GX_ZMETHODS">
            <summary>Compression methods. </summary>
        </member>
        <member name="F:gx.GX_ZMETHODS.GX_Z_DEFLATED">
            <summary>The deflate compression method (the only one supported). </summary>
        </member>
        <member name="T:gx.GX_CREATEZIPMODES">
            <summary>Create modes for gx_createzip() function. </summary>
        </member>
        <member name="F:gx.GX_CREATEZIPMODES.GX_ZIP_CREATE">
            <summary>Create a new ZIP file. </summary>
        </member>
        <member name="F:gx.GX_CREATEZIPMODES.GX_ZIP_CREATEAFTER">
            <summary>The ZIP will be created at the end of the file. </summary>
        </member>
        <member name="F:gx.GX_CREATEZIPMODES.GX_ZIP_ADDINZIP">
            <summary>Add files to an existing archive. </summary>
        </member>
        <member name="T:gx.GX_PARM_CREATETRAFO">
            <summary>Unmanaged parameter structure for .net. </summary>
        </member>
        <member name="F:gx.GX_PARM_CREATETRAFO.ptrafo">
            <summary>Pointer to an initialized transformation structure. </summary>
        </member>
        <member name="F:gx.GX_PARM_CREATETRAFO.pairs">
            <summary>Pointer to the list point pairs. </summary>
        </member>
        <member name="F:gx.GX_PARM_CREATETRAFO.npair">
            <summary>Number of points in the list of point pairs. </summary>
        </member>
        <member name="F:gx.GX_PARM_CREATETRAFO.frame">
            <summary>The transformation works within this frame. </summary>
            <remarks>The coordinates are defined on the source coordinate system. </remarks>
        </member>
        <member name="F:gx.GX_PARM_CREATETRAFO.resolution">
            <summary>Distances between two transformation elements. </summary>
        </member>
        <member name="M:gx.GX_PARM_CREATETRAFO.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:gx.GX_VARIANT">
            <summary>Empty structure type to map the variant type. </summary>
        </member>
        <member name="M:gx.GX_VARIANT.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:gx.gxPG2">
            <summary>Defines two points. </summary>
        </member>
        <member name="F:gx.gxPG2.x1">
            <summary>Horizontal coordinate of the first point. </summary>
        </member>
        <member name="F:gx.gxPG2.y1">
            <summary>Vertical coordinate of the first point. </summary>
        </member>
        <member name="F:gx.gxPG2.x2">
            <summary>Horizontal coordinate of the second point. </summary>
        </member>
        <member name="F:gx.gxPG2.y2">
            <summary>Vertical coordinate of the second point. </summary>
        </member>
        <member name="M:gx.gxPG2.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:gx.gxPG4">
            <summary>Defines four points. </summary>
        </member>
        <member name="F:gx.gxPG4.x1">
            <summary>Horizontal coordinate of the first point. </summary>
        </member>
        <member name="F:gx.gxPG4.y1">
            <summary>Vertical coordinate of the first point. </summary>
        </member>
        <member name="F:gx.gxPG4.x2">
            <summary>Horizontal coordinate of the second point. </summary>
        </member>
        <member name="F:gx.gxPG4.y2">
            <summary>Vertical coordinate of the second point. </summary>
        </member>
        <member name="F:gx.gxPG4.x3">
            <summary>Horizontal coordinate of the third point. </summary>
        </member>
        <member name="F:gx.gxPG4.y3">
            <summary>Vertical coordinate of the third point. </summary>
        </member>
        <member name="F:gx.gxPG4.x4">
            <summary>Horizontal coordinate of the fourth point. </summary>
        </member>
        <member name="F:gx.gxPG4.y4">
            <summary>Vertical coordinate of the fourth point. </summary>
        </member>
        <member name="M:gx.gxPG4.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:gx.gxPNT">
            <summary>Defines a single point. </summary>
        </member>
        <member name="F:gx.gxPNT.x">
            <summary>Horizontal coordinate of the point. </summary>
        </member>
        <member name="F:gx.gxPNT.y">
            <summary>Vertical coordinate of the point. </summary>
        </member>
        <member name="M:gx.gxPNT.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:gx.gxPNTF">
            <summary>Defines one point with floating-point values. </summary>
        </member>
        <member name="F:gx.gxPNTF.x">
            <summary>Horizontal coordinate of the point. </summary>
        </member>
        <member name="F:gx.gxPNTF.y">
            <summary>Vertical coordinate of the point. </summary>
        </member>
        <member name="M:gx.gxPNTF.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:gx.gxRCT">
            <summary>Rectangle definition. </summary>
        </member>
        <member name="F:gx.gxRCT.left">
            <summary>Left coordinate (X1) of the rectangle. </summary>
        </member>
        <member name="F:gx.gxRCT.top">
            <summary>Top coordinate (Y1) of the rectangle. </summary>
        </member>
        <member name="F:gx.gxRCT.right">
            <summary>Right coordinate (X2) of the rectangle. </summary>
        </member>
        <member name="F:gx.gxRCT.bottom">
            <summary>Bottom coordinate (Y2) of the rectangle. </summary>
        </member>
        <member name="M:gx.gxRCT.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:gx.gxTRAFO">
            <summary>Unmanaged <see cref="T:gx.gxTRAFO"/> structure for .net. </summary>
        </member>
        <member name="F:gx.gxTRAFO.gxid">
            <summary>Structure identifier. </summary>
        </member>
        <member name="F:gx.gxTRAFO.ref">
            <summary>Reference counter. </summary>
        </member>
        <member name="F:gx.gxTRAFO.source_frame">
            <summary>The transformation works within this frame. </summary>
            <remarks>The coordinates are defined on the source coordinate system. </remarks>
        </member>
        <member name="F:gx.gxTRAFO.xsize">
            <summary>Horizontal size of the transformation structure. </summary>
        </member>
        <member name="F:gx.gxTRAFO.ysize">
            <summary>Vertical size of the transformation structure. </summary>
        </member>
        <member name="F:gx.gxTRAFO.base">
            <summary>Elements of the transformation structure (Size is xsize*ysize*3). </summary>
        </member>
        <member name="F:gx.gxTRAFO.reserved">
            <summary>Reserved for the inverse operation. </summary>
        </member>
        <member name="M:gx.gxTRAFO.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:gx.gxZipFileDetInfo">
            <summary>Detailed information structure for a file in the ZIP. </summary>
        </member>
        <member name="F:gx.gxZipFileDetInfo.version">
            <summary>Version. </summary>
        </member>
        <member name="F:gx.gxZipFileDetInfo.version_needed">
            <summary>Version needed to extract. </summary>
        </member>
        <member name="F:gx.gxZipFileDetInfo.flag">
            <summary>General purpose bit flag. </summary>
        </member>
        <member name="F:gx.gxZipFileDetInfo.method">
            <summary>Compression method. </summary>
        </member>
        <member name="F:gx.gxZipFileDetInfo.crc">
            <summary>CRC-32 value. </summary>
        </member>
        <member name="F:gx.gxZipFileDetInfo.compressed_size">
            <summary>Compressed size in bytes. </summary>
        </member>
        <member name="F:gx.gxZipFileDetInfo.uncompressed_size">
            <summary>Uncompressed size in bytes. </summary>
        </member>
        <member name="F:gx.gxZipFileDetInfo.size_filename">
            <summary>Filename length in bytes. </summary>
        </member>
        <member name="F:gx.gxZipFileDetInfo.size_file_extra">
            <summary>Global extra field length in bytes. </summary>
        </member>
        <member name="F:gx.gxZipFileDetInfo.size_file_comment">
            <summary>File comment length in bytes. </summary>
        </member>
        <member name="F:gx.gxZipFileDetInfo.disk_num_start">
            <summary>Disk number start. </summary>
        </member>
        <member name="M:gx.gxZipFileDetInfo.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="T:gx.gxZipFileInfo">
            <summary>Information structure for a file in the ZIP. </summary>
        </member>
        <member name="F:gx.gxZipFileInfo.tm_sec">
            <summary>Seconds after the minute [0-59]. </summary>
        </member>
        <member name="F:gx.gxZipFileInfo.tm_min">
            <summary>Minutes after the hour [0-59]. </summary>
        </member>
        <member name="F:gx.gxZipFileInfo.tm_hour">
            <summary>Hours since midnight [0-23]. </summary>
        </member>
        <member name="F:gx.gxZipFileInfo.tm_mday">
            <summary>Day of the month [1-31]. </summary>
        </member>
        <member name="F:gx.gxZipFileInfo.tm_mon">
            <summary>Months since January [0-11]. </summary>
        </member>
        <member name="F:gx.gxZipFileInfo.tm_year">
            <summary>Years [1980-2044]. </summary>
        </member>
        <member name="F:gx.gxZipFileInfo.dosdate">
            <summary>If it is 0, tm_xxx fields are used. </summary>
        </member>
        <member name="F:gx.gxZipFileInfo.internal_fa">
            <summary>Internal file attributes. </summary>
        </member>
        <member name="F:gx.gxZipFileInfo.external_fa">
            <summary>External file attributes. </summary>
        </member>
        <member name="M:gx.gxZipFileInfo.#ctor">
            <summary>Default constructor.</summary>
        </member>
    </members>
</doc>
